{"version":3,"file":"main.mjs","sources":["../../output/main-thread/commands/offscreen-canvas.js","../../output/transfer/TransferrableMutation.js","../../output/main-thread/nodes.js","../../output/main-thread/commands/event-subscription.js","../../output/main-thread/commands/bounding-client-rect.js","../../output/main-thread/commands/child-list.js","../../output/main-thread/commands/attribute.js","../../output/main-thread/commands/character-data.js","../../output/main-thread/commands/property.js","../../output/main-thread/commands/long-task.js","../../output/main-thread/deserializeTransferrableObject.js","../../output/main-thread/commands/object-mutation.js","../../output/main-thread/commands/object-creation.js","../../output/main-thread/commands/image-bitmap.js","../../output/main-thread/commands/storage.js","../../output/main-thread/commands/function.js","../../output/main-thread/commands/scroll-into-view.js","../../output/main-thread/mutator.js","../../output/main-thread/strings.js","../../output/main-thread/serialize.js","../../output/main-thread/debugging.js","../../output/main-thread/worker.js","../../output/main-thread/object-context.js","../../output/main-thread/exported-worker.js","../../output/main-thread/install.js","../../output/main-thread/index.js"],"sourcesContent":["export const OffscreenCanvasProcessor = (strings, nodeContext, workerContext, objectContext, config) => {\n    const allowedExecution = config.executorsAllowed.includes(8 /* TransferrableMutationType.OFFSCREEN_CANVAS_INSTANCE */);\n    return {\n        execute(mutations, startPosition, allowedMutation) {\n            if (allowedExecution && allowedMutation) {\n                const targetIndex = mutations[startPosition + 1 /* OffscreenCanvasMutationIndex.Target */];\n                const target = nodeContext.getNode(targetIndex);\n                if (target) {\n                    const offscreen = target.transferControlToOffscreen();\n                    workerContext.messageToWorker({\n                        [12 /* TransferrableKeys.type */]: 9 /* MessageType.OFFSCREEN_CANVAS_INSTANCE */,\n                        [13 /* TransferrableKeys.target */]: [target._index_],\n                        [38 /* TransferrableKeys.data */]: offscreen, // Object, an OffscreenCanvas\n                    }, [offscreen]);\n                }\n                else {\n                    console.error(`'OFFSCREEN_CANVAS_INSTANCE': getNode(${targetIndex}) is null.`);\n                }\n            }\n            return startPosition + 2 /* OffscreenCanvasMutationIndex.End */;\n        },\n        print(mutations, startPosition, target) {\n            return {\n                type: 'OFFSCREEN_CANVAS_INSTANCE',\n                target,\n                allowedExecution,\n            };\n        },\n    };\n};\n//# sourceMappingURL=offscreen-canvas.js.map","/**\n * Returns true if the mutation type can cause a user-visible change to the DOM.\n * @param type\n */\nexport const isUserVisibleMutation = (type) => {\n    switch (type) {\n        case 4 /* TransferrableMutationType.EVENT_SUBSCRIPTION */:\n        case 5 /* TransferrableMutationType.GET_BOUNDING_CLIENT_RECT */:\n        case 6 /* TransferrableMutationType.LONG_TASK_START */:\n        case 7 /* TransferrableMutationType.LONG_TASK_END */:\n        case 12 /* TransferrableMutationType.STORAGE */:\n        case 8 /* TransferrableMutationType.OFFSCREEN_CANVAS_INSTANCE */:\n        case 13 /* TransferrableMutationType.FUNCTION_CALL */:\n            return false;\n        default:\n            return true;\n    }\n};\nexport const DefaultAllowedMutations = [\n    0 /* TransferrableMutationType.ATTRIBUTES */,\n    1 /* TransferrableMutationType.CHARACTER_DATA */,\n    2 /* TransferrableMutationType.CHILD_LIST */,\n    3 /* TransferrableMutationType.PROPERTIES */,\n    4 /* TransferrableMutationType.EVENT_SUBSCRIPTION */,\n    5 /* TransferrableMutationType.GET_BOUNDING_CLIENT_RECT */,\n    6 /* TransferrableMutationType.LONG_TASK_START */,\n    7 /* TransferrableMutationType.LONG_TASK_END */,\n    8 /* TransferrableMutationType.OFFSCREEN_CANVAS_INSTANCE */,\n    9 /* TransferrableMutationType.OBJECT_MUTATION */,\n    10 /* TransferrableMutationType.OBJECT_CREATION */,\n    11 /* TransferrableMutationType.IMAGE_BITMAP_INSTANCE */,\n    12 /* TransferrableMutationType.STORAGE */,\n    13 /* TransferrableMutationType.FUNCTION_CALL */,\n    14 /* TransferrableMutationType.SCROLL_INTO_VIEW */,\n];\nexport const ReadableMutationType = {\n    0: 'ATTRIBUTES',\n    1: 'CHARACTER_DATA',\n    2: 'CHILD_LIST',\n    3: 'PROPERTIES',\n    4: 'EVENT_SUBSCRIPTION',\n    5: 'GET_BOUNDING_CLIENT_RECT',\n    6: 'LONG_TASK_START',\n    7: 'LONG_TASK_END',\n    8: 'OFFSCREEN_CANVAS_INSTANCE',\n    9: 'OBJECT_MUTATION',\n    10: 'OBJECT_CREATION',\n    11: 'IMAGE_BITMAP_INSTANCE',\n    12: 'STORAGE',\n    13: 'FUNCTION_INVOCATION',\n    14: 'SCROLL_INTO_VIEW',\n};\n//# sourceMappingURL=TransferrableMutation.js.map","/**\n * IE11 doesn't support NodeList.prototype.forEach\n * https://developer.mozilla.org/en-US/docs/Web/API/NodeList/forEach\n * @param list NodeList to iterate over\n * @param callback method to call with each node\n */\nconst nodeListEach = (list, callback) => Array.prototype.forEach.call(list, callback);\nexport const BASE_ELEMENT_INDEX = 1;\nexport class NodeContext {\n    baseElement;\n    stringContext;\n    count;\n    nodes;\n    /**\n     * Called when initializing a Worker, ensures the nodes in baseElement are\n     * known for transmission into the Worker and future mutation events from the\n     * Worker.\n     * @param baseElement Element that will be controlled by a Worker\n     */\n    constructor(stringContext, baseElement) {\n        this.count = 2;\n        this.stringContext = stringContext;\n        // The nodes map is populated with two default values pointing to baseElement.\n        // These are [document, document.body] from the worker.\n        this.nodes = new Map([\n            [BASE_ELEMENT_INDEX, baseElement],\n            [2, baseElement],\n        ]);\n        this.baseElement = baseElement;\n        // To ensure a lookup works correctly from baseElement\n        // add an index equal to the background thread document.body.\n        baseElement._index_ = 2;\n        // Lastly, it's important while initializing the document that we store\n        // the default nodes present in the server rendered document.\n        nodeListEach(baseElement.childNodes, (n) => this.storeNodes(n));\n    }\n    createNodes = (buffer, sanitizer) => {\n        const nodeBuffer = new Uint16Array(buffer);\n        const nodeBufferLength = nodeBuffer.length;\n        for (let iterator = 0; iterator < nodeBufferLength; iterator += 5 /* TransferrableNodeIndex.End */) {\n            let node;\n            if (nodeBuffer[iterator + 1 /* TransferrableNodeIndex.NodeType */] === 3 /* NodeType.TEXT_NODE */) {\n                node = document.createTextNode(this.stringContext.get(nodeBuffer[iterator + 3 /* TransferrableNodeIndex.TextContent */]));\n            }\n            else if (nodeBuffer[iterator + 1 /* TransferrableNodeIndex.NodeType */] === 8 /* NodeType.COMMENT_NODE */) {\n                node = document.createComment(this.stringContext.get(nodeBuffer[iterator + 3 /* TransferrableNodeIndex.TextContent */]));\n            }\n            else if (nodeBuffer[iterator + 1 /* TransferrableNodeIndex.NodeType */] === 11 /* NodeType.DOCUMENT_FRAGMENT_NODE */) {\n                node = document.createDocumentFragment();\n            }\n            else {\n                const nodeName = this.stringContext.get(nodeBuffer[iterator + 2 /* TransferrableNodeIndex.NodeName */]);\n                node =\n                    nodeBuffer[iterator + 4 /* TransferrableNodeIndex.Namespace */] !== 0\n                        ? document.createElementNS(this.stringContext.get(nodeBuffer[iterator + 4 /* TransferrableNodeIndex.Namespace */]), nodeName)\n                        : document.createElement(nodeName);\n                // TODO(KB): Restore Properties\n                // skeleton.properties.forEach(property => {\n                //   node[`${property.name}`] = property.value;\n                // });\n                // ((skeleton as TransferrableElement)[TransferrableKeys.childNodes] || []).forEach(childNode => {\n                //   if (childNode[TransferrableKeys.transferred] === NumericBoolean.FALSE) {\n                //     node.appendChild(this.createNode(childNode as TransferrableNode));\n                //   }\n                // });\n                // If `node` is removed by the sanitizer, don't store it and return null.\n                if (sanitizer && !sanitizer.sanitize(node)) {\n                    continue;\n                }\n            }\n            this.storeNode(node, nodeBuffer[iterator]);\n        }\n    };\n    /**\n     * Returns the real DOM Element corresponding to a serialized Element object.\n     * @param id\n     * @return RenderableElement | null\n     */\n    getNode = (id) => {\n        const node = this.nodes.get(id);\n        if (node && node.nodeName === 'BODY') {\n            // If the node requested is the \"BODY\"\n            // Then we return the base node this specific <amp-script> comes from.\n            // This encapsulates each <amp-script> node.\n            return this.baseElement;\n        }\n        return node;\n    };\n    /**\n     * Store the requested node and all of its children.\n     * @param node node to store.\n     */\n    storeNodes = (node) => {\n        this.storeNode(node, ++this.count);\n        nodeListEach(node.childNodes, (n) => this.storeNodes(n));\n    };\n    /**\n     * Establish link between DOM `node` and worker-generated identifier `id`.\n     *\n     * These _shouldn't_ collide between instances of <amp-script> since\n     * each element creates it's own pool on both sides of the worker\n     * communication bridge.\n     * @param node\n     * @param id\n     */\n    storeNode(node, id) {\n        node._index_ = id;\n        this.nodes.set(id, node);\n    }\n}\n//# sourceMappingURL=nodes.js.map","import { ADD_EVENT_SUBSCRIPTION_LENGTH, REMOVE_EVENT_SUBSCRIPTION_LENGTH, } from '../../transfer/TransferrableEvent';\nimport { BASE_ELEMENT_INDEX } from '../nodes';\n/**\n * Monitoring Nodes attribute changes requires a Mutation Observer.\n * We store the nodes being monitored to avoid creating more than one Observer\n * per Element.\n */\nconst monitoredNodes = new Map();\n/**\n * Instead of a whitelist of elements that need their value tracked, use the existence\n * of a property called value to drive the decision.\n * @param node node to check if values should be tracked.\n * @return boolean if the node should have its value property tracked.\n */\nconst shouldTrackChanges = (node) => node && 'value' in node;\n/**\n * When a node that has a value needing synced doesn't already have an event listener\n * listening for input values, ensure the value is synced with a default listener.\n * @param worker whom to dispatch value toward.\n * @param node node to listen to value changes on.\n */\nexport const applyDefaultInputListener = (workerContext, node) => {\n    if (shouldTrackChanges(node) && node.oninput === null) {\n        node.oninput = () => fireValueChange(workerContext, node);\n    }\n};\n/**\n * Use a MutationObserver to capture value changes based on Attribute modification (frequently used by frameworks).\n * @param worker whom to dispatch value toward.\n * @param node node to listen to value changes on.\n */\nexport const sendValueChangeOnAttributeMutation = (workerContext, node) => {\n    if (shouldTrackChanges(node) && !monitoredNodes.get(node)) {\n        new MutationObserver((mutations) => mutations.map((mutation) => fireValueChange(workerContext, mutation.target))).observe(node, { attributes: true });\n        monitoredNodes.set(node, true);\n    }\n};\n/**\n * Tell WorkerDOM what the value is for a Node.\n * @param worker whom to dispatch value toward.\n * @param node where to get the value from.\n */\nconst fireValueChange = (workerContext, node) => workerContext.messageToWorker({\n    [12 /* TransferrableKeys.type */]: 4 /* MessageType.SYNC */,\n    [40 /* TransferrableKeys.sync */]: {\n        [7 /* TransferrableKeys.index */]: node._index_,\n        [21 /* TransferrableKeys.value */]: node.value,\n    },\n});\n/**\n * Tell WorkerDOM what the window dimensions are.\n * @param workerContext\n * @param cachedWindowSize\n */\nconst fireResizeChange = (workerContext, cachedWindowSize) => workerContext.messageToWorker({\n    [12 /* TransferrableKeys.type */]: 5 /* MessageType.RESIZE */,\n    [40 /* TransferrableKeys.sync */]: cachedWindowSize,\n});\n/**\n * Convert a TouchList into a TransferrableTouchList\n * @param touchList\n */\nconst createTransferrableTouchList = (touchList) => Object.values(touchList).map((touch) => [\n    touch.identifier,\n    touch.screenX,\n    touch.screenY,\n    touch.clientX,\n    touch.clientY,\n    touch.pageX,\n    touch.pageY,\n    touch.target._index_,\n]);\nexport const EventSubscriptionProcessor = (strings, nodeContext, workerContext, objectContext, config) => {\n    const knownListeners = [];\n    const allowedExecution = config.executorsAllowed.includes(4 /* TransferrableMutationType.EVENT_SUBSCRIPTION */);\n    let cachedWindowSize = [window.innerWidth, window.innerHeight];\n    /**\n     * Register an event handler for dispatching events to worker thread\n     * @param worker whom to dispatch events toward\n     * @param index node index the event comes from (used to dispatchEvent in worker thread).\n     * @return eventHandler function consuming event and dispatching to worker thread\n     */\n    const eventHandler = (index, preventDefault) => (event) => {\n        if (preventDefault) {\n            event.preventDefault();\n        }\n        if (shouldTrackChanges(event.currentTarget)) {\n            fireValueChange(workerContext, event.currentTarget);\n        }\n        else if (event.type === 'resize') {\n            const { innerWidth, innerHeight } = window;\n            if (cachedWindowSize[0] === innerWidth && cachedWindowSize[1] === innerHeight) {\n                return;\n            }\n            cachedWindowSize = [window.innerWidth, window.innerHeight];\n            fireResizeChange(workerContext, cachedWindowSize);\n        }\n        workerContext.messageToWorker({\n            [12 /* TransferrableKeys.type */]: 1 /* MessageType.EVENT */,\n            [39 /* TransferrableKeys.event */]: {\n                [7 /* TransferrableKeys.index */]: index,\n                [25 /* TransferrableKeys.bubbles */]: event.bubbles,\n                [26 /* TransferrableKeys.cancelable */]: event.cancelable,\n                [27 /* TransferrableKeys.cancelBubble */]: event.cancelBubble,\n                [28 /* TransferrableKeys.currentTarget */]: [event.currentTarget._index_ || 0],\n                [29 /* TransferrableKeys.defaultPrevented */]: event.defaultPrevented,\n                [30 /* TransferrableKeys.eventPhase */]: event.eventPhase,\n                [31 /* TransferrableKeys.isTrusted */]: event.isTrusted,\n                [32 /* TransferrableKeys.returnValue */]: event.returnValue,\n                [13 /* TransferrableKeys.target */]: [event.target._index_ || 0],\n                [33 /* TransferrableKeys.timeStamp */]: event.timeStamp,\n                [12 /* TransferrableKeys.type */]: event.type,\n                [35 /* TransferrableKeys.keyCode */]: 'keyCode' in event ? event.keyCode : undefined,\n                [60 /* TransferrableKeys.pageX */]: 'pageX' in event ? event.pageX : undefined,\n                [61 /* TransferrableKeys.pageY */]: 'pageY' in event ? event.pageY : undefined,\n                [65 /* TransferrableKeys.offsetX */]: 'offsetX' in event ? event.offsetX : undefined,\n                [66 /* TransferrableKeys.offsetY */]: 'offsetY' in event ? event.offsetY : undefined,\n                [62 /* TransferrableKeys.touches */]: 'touches' in event ? createTransferrableTouchList(event.touches) : undefined,\n                [63 /* TransferrableKeys.changedTouches */]: 'changedTouches' in event ? createTransferrableTouchList(event.changedTouches) : undefined,\n            },\n        });\n    };\n    /**\n     * If the worker requests to add an event listener to 'change' for something the foreground thread is already listening to,\n     * ensure that only a single 'change' event is attached to prevent sending values multiple times.\n     * @param target node to change listeners on\n     * @param addEvent is this an 'addEvent' or 'removeEvent' change\n     * @param mutations Uint16Array for this set of changes\n     * @param iterator current location in array to perform this change on\n     */\n    const processListenerChange = (target, addEvent, mutations, iterator) => {\n        const type = strings.get(mutations[iterator]);\n        const eventIndex = mutations[iterator + 1 /* AddEventRegistrationIndex.Index */];\n        if (target === nodeContext.baseElement) {\n            if (addEvent) {\n                const preventDefault = Boolean(mutations[iterator + 5 /* AddEventRegistrationIndex.WorkerDOMPreventDefault */]);\n                addEventListener(type, (knownListeners[eventIndex] = eventHandler(BASE_ELEMENT_INDEX, preventDefault)));\n            }\n            else {\n                removeEventListener(type, knownListeners[eventIndex]);\n            }\n            return;\n        }\n        let inputEventSubscribed = target.oninput !== null;\n        const isChangeEvent = type === 'change';\n        if (addEvent) {\n            if (isChangeEvent) {\n                inputEventSubscribed = true;\n                target.onchange = null;\n            }\n            const preventDefault = Boolean(mutations[iterator + 5 /* AddEventRegistrationIndex.WorkerDOMPreventDefault */]);\n            target.addEventListener(type, (knownListeners[eventIndex] = eventHandler(target._index_, preventDefault)));\n        }\n        else {\n            if (isChangeEvent) {\n                inputEventSubscribed = false;\n            }\n            target.removeEventListener(type, knownListeners[eventIndex]);\n        }\n        if (shouldTrackChanges(target)) {\n            if (!inputEventSubscribed)\n                applyDefaultInputListener(workerContext, target);\n            sendValueChangeOnAttributeMutation(workerContext, target);\n        }\n    };\n    return {\n        execute(mutations, startPosition, allowedMutation) {\n            const addEventListenerCount = mutations[startPosition + 3 /* EventSubscriptionMutationIndex.AddEventListenerCount */];\n            const removeEventListenerCount = mutations[startPosition + 2 /* EventSubscriptionMutationIndex.RemoveEventListenerCount */];\n            const addEventListenersPosition = startPosition + 4 /* EventSubscriptionMutationIndex.Events */ + removeEventListenerCount * REMOVE_EVENT_SUBSCRIPTION_LENGTH;\n            const endPosition = startPosition +\n                4 /* EventSubscriptionMutationIndex.Events */ +\n                addEventListenerCount * ADD_EVENT_SUBSCRIPTION_LENGTH +\n                removeEventListenerCount * REMOVE_EVENT_SUBSCRIPTION_LENGTH;\n            if (allowedExecution && allowedMutation) {\n                const targetIndex = mutations[startPosition + 1 /* EventSubscriptionMutationIndex.Target */];\n                const target = nodeContext.getNode(targetIndex);\n                if (target) {\n                    let iterator = startPosition + 4 /* EventSubscriptionMutationIndex.Events */;\n                    while (iterator < endPosition) {\n                        const isRemoveEvent = iterator <= addEventListenersPosition;\n                        processListenerChange(target, isRemoveEvent, mutations, iterator);\n                        iterator += isRemoveEvent ? REMOVE_EVENT_SUBSCRIPTION_LENGTH : ADD_EVENT_SUBSCRIPTION_LENGTH;\n                    }\n                }\n                else {\n                    console.error(`getNode(${targetIndex}) is null.`);\n                }\n            }\n            return endPosition;\n        },\n        print(mutations, startPosition) {\n            const addEventListenerCount = mutations[startPosition + 3 /* EventSubscriptionMutationIndex.AddEventListenerCount */];\n            const removeEventListenerCount = mutations[startPosition + 2 /* EventSubscriptionMutationIndex.RemoveEventListenerCount */];\n            const addEventListenersPosition = startPosition + 4 /* EventSubscriptionMutationIndex.Events */ + removeEventListenerCount * REMOVE_EVENT_SUBSCRIPTION_LENGTH;\n            const endPosition = startPosition +\n                4 /* EventSubscriptionMutationIndex.Events */ +\n                addEventListenerCount * ADD_EVENT_SUBSCRIPTION_LENGTH +\n                removeEventListenerCount * REMOVE_EVENT_SUBSCRIPTION_LENGTH;\n            const targetIndex = mutations[startPosition + 1 /* EventSubscriptionMutationIndex.Target */];\n            const target = nodeContext.getNode(targetIndex);\n            const removedEventListeners = [];\n            const addedEventListeners = [];\n            let iterator = startPosition + 4 /* EventSubscriptionMutationIndex.Events */;\n            while (iterator < endPosition) {\n                const isRemoveEvent = iterator <= addEventListenersPosition;\n                const eventList = isRemoveEvent ? addedEventListeners : removedEventListeners;\n                eventList.push({\n                    type: strings.get(mutations[iterator]),\n                    index: mutations[iterator + 1],\n                });\n                iterator += isRemoveEvent ? REMOVE_EVENT_SUBSCRIPTION_LENGTH : ADD_EVENT_SUBSCRIPTION_LENGTH;\n            }\n            return {\n                target,\n                allowedExecution,\n                removedEventListeners,\n                addedEventListeners,\n            };\n        },\n    };\n};\n//# sourceMappingURL=event-subscription.js.map","export const BoundingClientRectProcessor = (strings, nodes, workerContext, objectContext, config) => {\n    const allowedExecution = config.executorsAllowed.includes(5 /* TransferrableMutationType.GET_BOUNDING_CLIENT_RECT */);\n    return {\n        execute(mutations, startPosition, allowedMutation) {\n            if (allowedExecution && allowedMutation) {\n                const targetIndex = mutations[startPosition + 1 /* BoundClientRectMutationIndex.Target */];\n                const target = nodes.getNode(targetIndex);\n                if (target) {\n                    const boundingRect = target.getBoundingClientRect();\n                    workerContext.messageToWorker({\n                        [12 /* TransferrableKeys.type */]: 6 /* MessageType.GET_BOUNDING_CLIENT_RECT */,\n                        [13 /* TransferrableKeys.target */]: [target._index_],\n                        [38 /* TransferrableKeys.data */]: [\n                            boundingRect.top,\n                            boundingRect.right,\n                            boundingRect.bottom,\n                            boundingRect.left,\n                            boundingRect.width,\n                            boundingRect.height,\n                        ],\n                    });\n                }\n                else {\n                    console.error(`GET_BOUNDING_CLIENT_RECT: getNode(${targetIndex}) is null.`);\n                }\n            }\n            return startPosition + 2 /* BoundClientRectMutationIndex.End */;\n        },\n        print(mutations, startPosition) {\n            const targetIndex = mutations[startPosition + 1 /* BoundClientRectMutationIndex.Target */];\n            const target = nodes.getNode(targetIndex);\n            return {\n                type: 'GET_BOUNDING_CLIENT_RECT',\n                target,\n                allowedExecution,\n            };\n        },\n    };\n};\n//# sourceMappingURL=bounding-client-rect.js.map","import { applyDefaultInputListener, sendValueChangeOnAttributeMutation } from './event-subscription';\nexport const ChildListProcessor = (strings, { getNode }, workerContext, objectContext, config) => {\n    const allowedExecution = config.executorsAllowed.includes(2 /* TransferrableMutationType.CHILD_LIST */);\n    return {\n        execute(mutations, startPosition, allowedMutation) {\n            const appendNodeCount = mutations[startPosition + 4 /* ChildListMutationIndex.AppendedNodeCount */];\n            const removeNodeCount = mutations[startPosition + 5 /* ChildListMutationIndex.RemovedNodeCount */];\n            if (allowedExecution && allowedMutation) {\n                const targetIndex = mutations[startPosition + 1 /* ChildListMutationIndex.Target */];\n                const target = getNode(targetIndex);\n                if (target) {\n                    if (removeNodeCount > 0) {\n                        mutations\n                            .slice(startPosition + 6 /* ChildListMutationIndex.Nodes */ + appendNodeCount, startPosition + 6 /* ChildListMutationIndex.Nodes */ + appendNodeCount + removeNodeCount)\n                            .forEach((removeId) => {\n                            const node = getNode(removeId);\n                            if (node) {\n                                node.remove();\n                            }\n                            else {\n                                console.error(`CHILD_LIST: getNode(${removeId}) is null.`);\n                            }\n                        });\n                    }\n                    if (appendNodeCount > 0) {\n                        mutations\n                            .slice(startPosition + 6 /* ChildListMutationIndex.Nodes */, startPosition + 6 /* ChildListMutationIndex.Nodes */ + appendNodeCount)\n                            .forEach((addId) => {\n                            const nextSibling = mutations[startPosition + 2 /* ChildListMutationIndex.NextSibling */];\n                            const newNode = getNode(addId);\n                            if (newNode) {\n                                // TODO: Handle this case ---\n                                // Transferred nodes that are not stored were previously removed by the sanitizer.\n                                target.insertBefore(newNode, (nextSibling && getNode(nextSibling)) || null);\n                                applyDefaultInputListener(workerContext, newNode);\n                                sendValueChangeOnAttributeMutation(workerContext, newNode);\n                            }\n                        });\n                    }\n                }\n                else {\n                    console.error(`CHILD_LIST: getNode(${targetIndex}) is null.`);\n                }\n            }\n            return startPosition + 6 /* ChildListMutationIndex.End */ + appendNodeCount + removeNodeCount;\n        },\n        print(mutations, startPosition) {\n            const targetIndex = mutations[startPosition + 1 /* ChildListMutationIndex.Target */];\n            const target = getNode(targetIndex);\n            const appendNodeCount = mutations[startPosition + 4 /* ChildListMutationIndex.AppendedNodeCount */];\n            const removeNodeCount = mutations[startPosition + 5 /* ChildListMutationIndex.RemovedNodeCount */];\n            const removedNodes = Array.from(mutations.slice(startPosition + 6 /* ChildListMutationIndex.Nodes */ + appendNodeCount, startPosition + 6 /* ChildListMutationIndex.Nodes */ + appendNodeCount + removeNodeCount)).map((index) => getNode(index) || index);\n            const addedNodes = Array.from(mutations.slice(startPosition + 6 /* ChildListMutationIndex.Nodes */, startPosition + 6 /* ChildListMutationIndex.Nodes */ + appendNodeCount)).map((index) => getNode(index) || index);\n            return {\n                target,\n                allowedExecution,\n                nextSibling: getNode(mutations[startPosition + 2 /* ChildListMutationIndex.NextSibling */]) || null,\n                previousSibling: getNode(mutations[startPosition + 3 /* ChildListMutationIndex.PreviousSibling */]) || null,\n                addedNodes,\n                removedNodes,\n            };\n        },\n    };\n};\n//# sourceMappingURL=child-list.js.map","export const AttributeProcessor = (strings, nodes, workerContext, objectContext, config) => {\n    const allowedExecution = config.executorsAllowed.includes(0 /* TransferrableMutationType.ATTRIBUTES */);\n    /**\n     * @param mutations\n     * @param startPosition\n     */\n    const getValue = (mutations, startPosition) => {\n        const value = mutations[startPosition + 4 /* AttributeMutationIndex.Value */];\n        // Value is sent as 0 when it's the default value or removal.\n        // Value is sent as index + 1 when it's a valid value.\n        return value !== 0 ? strings.get(value - 1) : null;\n    };\n    return {\n        execute(mutations, startPosition, allowedMutation) {\n            if (allowedExecution && allowedMutation) {\n                const targetIndex = mutations[startPosition + 1 /* AttributeMutationIndex.Target */];\n                const target = nodes.getNode(targetIndex);\n                const attributeName = strings.get(mutations[startPosition + 2 /* AttributeMutationIndex.Name */]);\n                const value = getValue(mutations, startPosition);\n                if (target) {\n                    if (attributeName != null) {\n                        if (config.sanitizer) {\n                            const mutated = config.sanitizer.setAttribute(target, attributeName, value);\n                            if (!mutated) {\n                                // TODO(choumx): Inform worker that sanitizer ignored unsafe attribute value change.\n                            }\n                        }\n                        else {\n                            if (value == null) {\n                                target.removeAttribute(attributeName);\n                            }\n                            else {\n                                target.setAttribute(attributeName, value);\n                            }\n                        }\n                    }\n                }\n                else {\n                    console.error(`ATTR_LIST: getNode(${targetIndex}) is null.`);\n                }\n            }\n            return startPosition + 5 /* AttributeMutationIndex.End */;\n        },\n        print(mutations, startPosition) {\n            const targetIndex = mutations[startPosition + 1 /* AttributeMutationIndex.Target */];\n            const target = nodes.getNode(targetIndex);\n            const attributeName = strings.get(mutations[startPosition + 2 /* AttributeMutationIndex.Name */]);\n            const value = getValue(mutations, startPosition);\n            return {\n                target,\n                allowedExecution,\n                attributeName,\n                value,\n                remove: value == null,\n            };\n        },\n    };\n};\n//# sourceMappingURL=attribute.js.map","export const CharacterDataProcessor = (strings, nodes, workerContext, objectContext, config) => {\n    const allowedExecution = config.executorsAllowed.includes(1 /* TransferrableMutationType.CHARACTER_DATA */);\n    return {\n        execute(mutations, startPosition, allowedMutation) {\n            if (allowedExecution && allowedMutation) {\n                const targetIndex = mutations[startPosition + 1 /* CharacterDataMutationIndex.Target */];\n                const target = nodes.getNode(targetIndex);\n                const value = mutations[startPosition + 2 /* CharacterDataMutationIndex.Value */];\n                if (target) {\n                    if (value) {\n                        // Sanitization not necessary for textContent.\n                        target.textContent = strings.get(value);\n                    }\n                }\n                else {\n                    console.error(`CHAR_DATA: getNode(${targetIndex}) is null.`);\n                }\n            }\n            return startPosition + 3 /* CharacterDataMutationIndex.End */;\n        },\n        print(mutations, startPosition) {\n            const targetIndex = mutations[startPosition + 1 /* CharacterDataMutationIndex.Target */];\n            const target = nodes.getNode(targetIndex);\n            return {\n                target,\n                allowedExecution,\n                value: strings.get(mutations[startPosition + 2 /* CharacterDataMutationIndex.Value */]),\n            };\n        },\n    };\n};\n//# sourceMappingURL=character-data.js.map","export const PropertyProcessor = (strings, nodeContext, workerContext, objectContext, config) => {\n    const allowedExecution = config.executorsAllowed.includes(3 /* TransferrableMutationType.PROPERTIES */);\n    const getValue = (mutations, startPosition) => {\n        const value = mutations[startPosition + 4 /* PropertyMutationIndex.Value */];\n        if (mutations[startPosition + 3 /* PropertyMutationIndex.IsBoolean */] === 1 /* NumericBoolean.TRUE */) {\n            return value === 1 /* NumericBoolean.TRUE */;\n        }\n        if (value !== 0) {\n            return strings.get(value);\n        }\n        return null;\n    };\n    return {\n        execute(mutations, startPosition, allowedMutation) {\n            if (allowedExecution && allowedMutation) {\n                const targetIndex = mutations[startPosition + 1 /* PropertyMutationIndex.Target */];\n                const target = nodeContext.getNode(targetIndex);\n                const name = strings.get(mutations[startPosition + 2 /* PropertyMutationIndex.Name */]);\n                const value = getValue(mutations, startPosition);\n                if (target) {\n                    if (name && value != null) {\n                        if (config.sanitizer) {\n                            const mutated = config.sanitizer.setProperty(target, name, String(value));\n                            if (!mutated) {\n                                // TODO(choumx): Inform worker that sanitizer ignored unsafe property value change.\n                            }\n                        }\n                        else {\n                            target[name] = value;\n                        }\n                    }\n                }\n                else {\n                    console.error(`PROPERTY: getNode(${targetIndex}) is null.`);\n                }\n            }\n            return startPosition + 5 /* PropertyMutationIndex.End */;\n        },\n        print(mutations, startPosition) {\n            const targetIndex = mutations[startPosition + 1 /* PropertyMutationIndex.Target */];\n            const target = nodeContext.getNode(targetIndex);\n            const name = strings.get(mutations[startPosition + 2 /* PropertyMutationIndex.Name */]);\n            const value = getValue(mutations, startPosition);\n            return {\n                target,\n                name,\n                value,\n                allowedExecution,\n            };\n        },\n    };\n};\n//# sourceMappingURL=property.js.map","import { ReadableMutationType } from '../../transfer/TransferrableMutation';\nexport const LongTaskExecutor = (stringContext, nodeContext, workerContext, objectContext, config) => {\n    const allowedExecution = config.executorsAllowed.includes(6 /* TransferrableMutationType.LONG_TASK_START */);\n    let index = 0;\n    let currentResolver;\n    return {\n        execute(mutations, startPosition, allowedMutation) {\n            if (allowedExecution && allowedMutation && config.longTask) {\n                if (mutations[startPosition] === 6 /* TransferrableMutationType.LONG_TASK_START */) {\n                    index++;\n                    if (!currentResolver) {\n                        const newResolver = new Promise((resolve) => (currentResolver = resolve));\n                        // One of the worker-dom contracts is that there should not be two\n                        // LONG_TASK_STARTs in a row without an END in between. In case both exist within\n                        // the same set of mutations, we need to guard against having a consumers 1st END\n                        // handler occur after the START handler. If we synchronously called longTask() here it\n                        // would likely occur due to scheduling of callbacks vs. promise.\n                        // See: worker-dom/pull/989.\n                        Promise.resolve().then(() => config.longTask && config.longTask(newResolver));\n                    }\n                }\n                else if (mutations[startPosition] === 7 /* TransferrableMutationType.LONG_TASK_END */) {\n                    index--;\n                    if (currentResolver && index <= 0) {\n                        currentResolver();\n                        currentResolver = null;\n                        index = 0;\n                    }\n                }\n            }\n            return startPosition + 2 /* LongTaskMutationIndex.End */;\n        },\n        print(mutations, startPosition) {\n            return {\n                type: ReadableMutationType[mutations[startPosition]],\n                allowedExecution,\n            };\n        },\n        get active() {\n            return currentResolver !== null;\n        },\n    };\n};\n//# sourceMappingURL=long-task.js.map","const f32 = new Float32Array(1);\nconst u16 = new Uint16Array(f32.buffer);\n/**\n * Deserializes TransferrableObjectType arguments.\n * @param buffer Contains mutation with arguments to deserialize.\n * @param offset Start position of arguments in mutations buffer.\n * @param count Number of arguments to deserialize.\n * @param stringContext Strings context.\n * @param nodeContext Nodes context.\n * @param objectContext Objects context\n */\nexport function deserializeTransferrableObject(buffer, offset, count, stringContext, nodeContext, objectContext) {\n    const args = [];\n    for (let i = 0; i < count; i++) {\n        switch (buffer[offset++]) {\n            case 1 /* TransferrableObjectType.SmallInt */:\n                args.push(buffer[offset++]);\n                break;\n            case 2 /* TransferrableObjectType.Float */:\n                u16[0] = buffer[offset++];\n                u16[1] = buffer[offset++];\n                args.push(f32[0]);\n                break;\n            case 3 /* TransferrableObjectType.String */:\n                args.push(stringContext.get(buffer[offset++]));\n                break;\n            case 4 /* TransferrableObjectType.Array */:\n                const size = buffer[offset++];\n                const des = deserializeTransferrableObject(buffer, offset, size, stringContext, nodeContext, objectContext);\n                args.push(des.args);\n                offset = des.offset;\n                break;\n            case 5 /* TransferrableObjectType.TransferObject */:\n                if (!objectContext) {\n                    throw new Error('objectContext not provided.');\n                }\n                args.push(objectContext.get(buffer[offset++]));\n                break;\n            case 6 /* TransferrableObjectType.CanvasRenderingContext2D */:\n                const canvas = nodeContext.getNode(buffer[offset++]);\n                args.push(canvas.getContext('2d'));\n                break;\n            case 7 /* TransferrableObjectType.HTMLElement */:\n                args.push(nodeContext.getNode(buffer[offset++]));\n                break;\n            default:\n                throw new Error('Cannot deserialize argument.');\n        }\n    }\n    return {\n        args,\n        offset,\n    };\n}\n//# sourceMappingURL=deserializeTransferrableObject.js.map","import { deserializeTransferrableObject } from '../deserializeTransferrableObject';\nexport const ObjectMutationProcessor = (strings, nodeContext, workerContext, objectContext, config) => {\n    const allowedExecution = config.executorsAllowed.includes(9 /* TransferrableMutationType.OBJECT_MUTATION */);\n    return {\n        execute(mutations, startPosition, allowedMutation) {\n            const functionName = strings.get(mutations[startPosition + 1 /* ObjectMutationIndex.FunctionName */]);\n            const argCount = mutations[startPosition + 2 /* ObjectMutationIndex.ArgumentCount */];\n            const { offset: targetOffset, args: deserializedTarget } = deserializeTransferrableObject(mutations, startPosition + 3 /* ObjectMutationIndex.SerializedTarget */, 1, strings, nodeContext, objectContext);\n            const target = deserializedTarget[0];\n            const { offset: argsOffset, args } = deserializeTransferrableObject(mutations, targetOffset, argCount, strings, nodeContext, objectContext);\n            if (allowedExecution && allowedMutation) {\n                if (isSetter(target, functionName)) {\n                    target[functionName] = args[0];\n                }\n                else {\n                    target[functionName](...args);\n                }\n            }\n            return argsOffset;\n        },\n        print(mutations, startPosition) {\n            const functionName = strings.get(mutations[startPosition + 1 /* ObjectMutationIndex.FunctionName */]);\n            const { args: deserializedTarget } = deserializeTransferrableObject(mutations, startPosition + 3 /* ObjectMutationIndex.SerializedTarget */, 1, strings, nodeContext, objectContext);\n            const target = deserializedTarget[0];\n            return {\n                type: 'OBJECT_MUTATION',\n                target,\n                functionName,\n                isSetter: isSetter(target, functionName),\n                allowedExecution,\n            };\n        },\n    };\n};\nfunction isSetter(object, name) {\n    if (!object) {\n        throw new Error(`Property ${name} does not exist on ${object}.`);\n    }\n    const descriptor = Object.getOwnPropertyDescriptor(object, name);\n    if (descriptor !== undefined) {\n        return 'set' in descriptor;\n    }\n    return isSetter(Object.getPrototypeOf(object), name);\n}\n//# sourceMappingURL=object-mutation.js.map","import { deserializeTransferrableObject } from '../deserializeTransferrableObject';\nexport const ObjectCreationProcessor = (strings, nodeContext, workerContext, objectContext, config) => {\n    const allowedExecution = config.executorsAllowed.includes(10 /* TransferrableMutationType.OBJECT_CREATION */);\n    if (!objectContext) {\n        throw new Error('objectContext is not defined.');\n    }\n    return {\n        execute(mutations, startPosition, allowedMutation) {\n            const functionName = strings.get(mutations[startPosition + 1 /* ObjectCreationIndex.FunctionName */]);\n            const objectId = mutations[startPosition + 2 /* ObjectCreationIndex.ObjectId */];\n            const argCount = mutations[startPosition + 3 /* ObjectCreationIndex.ArgumentCount */];\n            const { offset: targetOffset, args: deserializedTarget } = deserializeTransferrableObject(mutations, startPosition + 4 /* ObjectCreationIndex.SerializedTarget */, 1, // argCount\n            strings, nodeContext, objectContext);\n            const target = deserializedTarget[0];\n            const { offset: argsOffset, args } = deserializeTransferrableObject(mutations, targetOffset, argCount, strings, nodeContext, objectContext);\n            if (allowedExecution && allowedMutation) {\n                if (functionName === 'new') {\n                    // deal with constructor case here\n                }\n                else {\n                    objectContext.store(objectId, target[functionName](...args));\n                }\n            }\n            return argsOffset;\n        },\n        print(mutations, startPosition) {\n            const functionName = strings.get(mutations[startPosition + 1 /* ObjectCreationIndex.FunctionName */]);\n            const objectId = mutations[startPosition + 2 /* ObjectCreationIndex.ObjectId */];\n            const argCount = mutations[startPosition + 3 /* ObjectCreationIndex.ArgumentCount */];\n            const { args: deserializedTarget } = deserializeTransferrableObject(mutations, startPosition + 4 /* ObjectCreationIndex.SerializedTarget */, 1, // argCount\n            strings, nodeContext, objectContext);\n            const target = deserializedTarget[0];\n            return {\n                type: 'OBJECT_CREATION',\n                target,\n                functionName,\n                objectId,\n                argCount,\n                allowedExecution,\n            };\n        },\n    };\n};\n//# sourceMappingURL=object-creation.js.map","export const ImageBitmapProcessor = (strings, nodeContext, workerContext, objectContext, config) => {\n    const allowedExecution = config.executorsAllowed.includes(11 /* TransferrableMutationType.IMAGE_BITMAP_INSTANCE */);\n    return {\n        execute(mutations, startPosition, allowedMutation) {\n            if (allowedExecution && allowedMutation) {\n                const targetIndex = mutations[startPosition + 1 /* ImageBitmapMutationIndex.Target */];\n                const target = nodeContext.getNode(targetIndex);\n                if (target) {\n                    self.createImageBitmap(target).then((imageBitmap) => {\n                        workerContext.messageToWorker({\n                            [12 /* TransferrableKeys.type */]: 10 /* MessageType.IMAGE_BITMAP_INSTANCE */,\n                            [73 /* TransferrableKeys.callIndex */]: mutations[startPosition + 2 /* ImageBitmapMutationIndex.CallIndex */],\n                            [38 /* TransferrableKeys.data */]: imageBitmap,\n                        }, [imageBitmap]);\n                    });\n                }\n                else {\n                    console.error(`IMAGE_BITMAP_INSTANCE: getNode(${targetIndex}) is null.`);\n                }\n            }\n            return startPosition + 3 /* ImageBitmapMutationIndex.End */;\n        },\n        print(mutations, startPosition) {\n            const targetIndex = mutations[startPosition + 1 /* ImageBitmapMutationIndex.Target */];\n            const target = nodeContext.getNode(targetIndex);\n            return {\n                type: 'IMAGE_BITMAP_INSTANCE',\n                target,\n                allowedExecution,\n                callIndex: mutations[startPosition + 2 /* ImageBitmapMutationIndex.CallIndex */],\n            };\n        },\n    };\n};\n//# sourceMappingURL=image-bitmap.js.map","export const StorageProcessor = (strings, nodeContext, workerContext, objectContext, config) => {\n    const allowedExecution = config.executorsAllowed.includes(12 /* TransferrableMutationType.STORAGE */);\n    const get = (location, key) => {\n        if (config.sanitizer && location === 2 /* StorageLocation.AmpState */) {\n            config.sanitizer.getStorage(location, key).then((value) => {\n                const message = {\n                    [12 /* TransferrableKeys.type */]: 11 /* MessageType.GET_STORAGE */,\n                    [74 /* TransferrableKeys.storageKey */]: key,\n                    [75 /* TransferrableKeys.storageLocation */]: location,\n                    [21 /* TransferrableKeys.value */]: value,\n                };\n                workerContext.messageToWorker(message);\n            });\n        }\n        else {\n            console.error(`STORAGE: Sanitizer not found or unsupported location:`, location);\n        }\n    };\n    const set = (location, key, value) => {\n        if (config.sanitizer) {\n            // TODO: Message worker so AMP.setState() can be Promise-able.\n            config.sanitizer.setStorage(location, key, value);\n        }\n        else {\n            let storage;\n            if (location === 0 /* StorageLocation.Local */) {\n                storage = window.localStorage;\n            }\n            else if (location === 1 /* StorageLocation.Session */) {\n                storage = window.sessionStorage;\n            }\n            if (storage) {\n                if (key == null) {\n                    if (value == null) {\n                        storage.clear();\n                    }\n                    else {\n                        throw new Error('Unexpected storage operation.');\n                    }\n                }\n                else {\n                    if (value == null) {\n                        storage.removeItem(key);\n                    }\n                    else {\n                        storage.setItem(key, value);\n                    }\n                }\n            }\n            else {\n                console.error(`STORAGE: Unexpected location: \"${location}\".`);\n            }\n        }\n    };\n    return {\n        execute(mutations, startPosition, allowedMutation) {\n            if (allowedExecution && allowedMutation) {\n                const operation = mutations[startPosition + 1 /* StorageMutationIndex.Operation */];\n                const location = mutations[startPosition + 2 /* StorageMutationIndex.Location */];\n                const keyIndex = mutations[startPosition + 3 /* StorageMutationIndex.Key */];\n                const valueIndex = mutations[startPosition + 4 /* StorageMutationIndex.Value */];\n                // TODO(choumx): Clean up key/value strings (or don't store them in the first place)\n                // to avoid leaking memory.\n                const key = keyIndex > 0 ? strings.get(keyIndex - 1) : '';\n                const value = valueIndex > 0 ? strings.get(valueIndex - 1) : null;\n                if (operation === 1 /* GetOrSet.GET */) {\n                    get(location, key);\n                }\n                else if (operation === 2 /* GetOrSet.SET */) {\n                    set(location, key, value);\n                }\n            }\n            return startPosition + 5 /* StorageMutationIndex.End */;\n        },\n        print(mutations, startPosition) {\n            const operation = mutations[startPosition + 1 /* StorageMutationIndex.Operation */];\n            const location = mutations[startPosition + 2 /* StorageMutationIndex.Location */];\n            const keyIndex = mutations[startPosition + 3 /* StorageMutationIndex.Key */];\n            const valueIndex = mutations[startPosition + 4 /* StorageMutationIndex.Value */];\n            const key = keyIndex > 0 ? strings.get(keyIndex - 1) : null;\n            const value = valueIndex > 0 ? strings.get(valueIndex - 1) : null;\n            return {\n                type: 'STORAGE',\n                operation,\n                location,\n                key,\n                value,\n                allowedExecution,\n            };\n        },\n    };\n};\n//# sourceMappingURL=storage.js.map","let fnCallCount = 0;\n/**\n * A mapping between each request to callFunction and its Promise.\n */\nconst promiseMap = {};\n/**\n * Each invocation of `ExportedWorker.prototype.callFunction` needs to be registered with a unique index\n * and promise. The index is given to the underlying Worker and returned by it as well. That enables the main-thread to\n * correlate postMessage responses with their original requests and resolve/reject the correct Promise.\n */\nexport function registerPromise() {\n    // TS won't realize that the constructor promise assigns the handlers, so we `any` them.\n    let resolve;\n    let reject;\n    const promise = new Promise((res, rej) => {\n        resolve = res;\n        reject = rej;\n    });\n    // Wraparound to 0 in case someone attempts to register over 9 quadrillion promises.\n    if (fnCallCount >= Number.MAX_VALUE) {\n        fnCallCount = 0;\n    }\n    const index = fnCallCount++;\n    promiseMap[index] = { promise, resolve, reject };\n    return { promise, index };\n}\nexport const FunctionProcessor = (strings, nodeContext, workerContext, objectContext, config) => {\n    const allowedExecution = config.executorsAllowed.includes(13 /* TransferrableMutationType.FUNCTION_CALL */);\n    return {\n        execute(mutations, startPosition) {\n            if (allowedExecution) {\n                const status = mutations[startPosition + 1 /* FunctionMutationIndex.Status */];\n                const index = mutations[startPosition + 2 /* FunctionMutationIndex.Index */];\n                const value = mutations[startPosition + 3 /* FunctionMutationIndex.Value */];\n                const parsed = strings.hasIndex(value) ? JSON.parse(strings.get(value)) : undefined;\n                if (status === 1 /* ResolveOrReject.RESOLVE */) {\n                    promiseMap[index].resolve(parsed);\n                }\n                else {\n                    promiseMap[index].reject(parsed);\n                }\n                delete promiseMap[index];\n            }\n            return startPosition + 4 /* FunctionMutationIndex.End */;\n        },\n        print(mutations, startPosition) {\n            const status = mutations[startPosition + 1 /* FunctionMutationIndex.Status */];\n            const index = mutations[startPosition + 2 /* FunctionMutationIndex.Index */];\n            const value = mutations[startPosition + 3 /* FunctionMutationIndex.Value */];\n            return {\n                type: 'FUNCTION_INVOCATION',\n                status,\n                index,\n                value: strings.get(value),\n                allowedExecution,\n            };\n        },\n    };\n};\n//# sourceMappingURL=function.js.map","export const ScrollIntoViewProcessor = (strings, nodes, workerContext, objectContext, config) => {\n    const allowedExecution = config.executorsAllowed.includes(14 /* TransferrableMutationType.SCROLL_INTO_VIEW */);\n    return {\n        execute(mutations, startPosition, allowedMutation) {\n            if (allowedExecution && allowedMutation) {\n                const targetIndex = mutations[startPosition + 1 /* ScrollIntoViewMutationIndex.Target */];\n                const target = nodes.getNode(targetIndex);\n                if (target) {\n                    target.scrollIntoView();\n                }\n                else {\n                    console.error(`SCROLL_INTO_VIEW: getNode(${targetIndex}) is null.`);\n                }\n            }\n            return startPosition + 2 /* ScrollIntoViewMutationIndex.End */;\n        },\n        print(mutations, startPosition) {\n            const targetIndex = mutations[startPosition + 1 /* ScrollIntoViewMutationIndex.Target */];\n            const target = nodes.getNode(targetIndex);\n            return {\n                type: 'SCROLL_INTO_VIEW',\n                target,\n                allowedExecution,\n            };\n        },\n    };\n};\n//# sourceMappingURL=scroll-into-view.js.map","import { OffscreenCanvasProcessor } from './commands/offscreen-canvas';\nimport { ReadableMutationType, isUserVisibleMutation } from '../transfer/TransferrableMutation';\nimport { EventSubscriptionProcessor } from './commands/event-subscription';\nimport { BoundingClientRectProcessor } from './commands/bounding-client-rect';\nimport { ChildListProcessor } from './commands/child-list';\nimport { AttributeProcessor } from './commands/attribute';\nimport { CharacterDataProcessor } from './commands/character-data';\nimport { PropertyProcessor } from './commands/property';\nimport { LongTaskExecutor } from './commands/long-task';\nimport { ObjectMutationProcessor } from './commands/object-mutation';\nimport { ObjectCreationProcessor } from './commands/object-creation';\nimport { ImageBitmapProcessor } from './commands/image-bitmap';\nimport { StorageProcessor } from './commands/storage';\nimport { FunctionProcessor } from './commands/function';\nimport { ScrollIntoViewProcessor } from './commands/scroll-into-view';\nexport class MutatorProcessor {\n    stringContext;\n    nodeContext;\n    mutationQueue = [];\n    pendingMutations = false;\n    mutationPumpFunction;\n    sanitizer;\n    executors;\n    /**\n     * @param stringContext\n     * @param nodeContext\n     * @param workerContext\n     * @param sanitizer Sanitizer to apply to content if needed.\n     */\n    constructor(stringContext, nodeContext, workerContext, config, objectContext) {\n        this.stringContext = stringContext;\n        this.nodeContext = nodeContext;\n        this.sanitizer = config.sanitizer;\n        this.mutationPumpFunction = config.mutationPump;\n        const args = [\n            stringContext,\n            nodeContext,\n            workerContext,\n            objectContext,\n            config,\n        ];\n        const sharedLongTaskProcessor = LongTaskExecutor.apply(null, args);\n        this.executors = {\n            [2 /* TransferrableMutationType.CHILD_LIST */]: ChildListProcessor.apply(null, args),\n            [0 /* TransferrableMutationType.ATTRIBUTES */]: AttributeProcessor.apply(null, args),\n            [1 /* TransferrableMutationType.CHARACTER_DATA */]: CharacterDataProcessor.apply(null, args),\n            [3 /* TransferrableMutationType.PROPERTIES */]: PropertyProcessor.apply(null, args),\n            [4 /* TransferrableMutationType.EVENT_SUBSCRIPTION */]: EventSubscriptionProcessor.apply(null, args),\n            [5 /* TransferrableMutationType.GET_BOUNDING_CLIENT_RECT */]: BoundingClientRectProcessor.apply(null, args),\n            [6 /* TransferrableMutationType.LONG_TASK_START */]: sharedLongTaskProcessor,\n            [7 /* TransferrableMutationType.LONG_TASK_END */]: sharedLongTaskProcessor,\n            [8 /* TransferrableMutationType.OFFSCREEN_CANVAS_INSTANCE */]: OffscreenCanvasProcessor.apply(null, args),\n            [9 /* TransferrableMutationType.OBJECT_MUTATION */]: ObjectMutationProcessor.apply(null, args),\n            [10 /* TransferrableMutationType.OBJECT_CREATION */]: ObjectCreationProcessor.apply(null, args),\n            [11 /* TransferrableMutationType.IMAGE_BITMAP_INSTANCE */]: ImageBitmapProcessor.apply(null, args),\n            [12 /* TransferrableMutationType.STORAGE */]: StorageProcessor.apply(null, args),\n            [13 /* TransferrableMutationType.FUNCTION_CALL */]: FunctionProcessor.apply(null, args),\n            [14 /* TransferrableMutationType.SCROLL_INTO_VIEW */]: ScrollIntoViewProcessor.apply(null, args),\n        };\n    }\n    /**\n     * Process MutationRecords from worker thread applying changes to the existing DOM.\n     * @param phase Current Phase Worker Thread exists in.\n     * @param nodes New nodes to add in the main thread with the incoming mutations.\n     * @param stringValues Additional string values to use in decoding messages.\n     * @param mutations Changes to apply in both graph shape and content of Elements.\n     */\n    mutate(phase, nodes, stringValues, mutations) {\n        this.stringContext.storeValues(stringValues);\n        this.nodeContext.createNodes(nodes, this.sanitizer);\n        this.mutationQueue = this.mutationQueue.concat(mutations);\n        if (!this.pendingMutations) {\n            this.pendingMutations = true;\n            this.mutationPumpFunction(this.syncFlush, phase);\n        }\n    }\n    /**\n     * Apply all stored mutations syncronously. This method works well, but can cause jank if there are too many\n     * mutations to apply in a single frame.\n     *\n     * Investigations in using asyncFlush to resolve are worth considering.\n     *\n     * @param allowVisibleMutations\n     * @return Array of mutation types that were disallowed.\n     */\n    syncFlush = (allowVisibleMutations = true) => {\n        if (WORKER_DOM_DEBUG) {\n            console.group('Mutations');\n        }\n        const disallowedMutations = [];\n        this.mutationQueue.forEach((mutationArray) => {\n            const length = mutationArray.length;\n            let operationStart = 0;\n            while (operationStart < length) {\n                // TransferrableMutationType is always at position 0.\n                const mutationType = mutationArray[operationStart];\n                // TODO(worker-dom): Hoist `allow` up to entry point (index.amp.ts) to avoid bundling `isUserVisibleMutation`.\n                const allow = allowVisibleMutations || !isUserVisibleMutation(mutationType);\n                if (!allow) {\n                    // TODO(worker-dom): Consider returning the strings from executor.print() for better error messaging.\n                    disallowedMutations.push(mutationType);\n                }\n                const executor = this.executors[mutationType];\n                if (WORKER_DOM_DEBUG) {\n                    console.log(allow ? '' : '[disallowed]', ReadableMutationType[mutationType], executor.print(mutationArray, operationStart));\n                }\n                operationStart = executor.execute(mutationArray, operationStart, allow);\n            }\n        });\n        if (WORKER_DOM_DEBUG) {\n            console.groupEnd();\n        }\n        this.mutationQueue = [];\n        this.pendingMutations = false;\n        return disallowedMutations;\n    };\n}\n//# sourceMappingURL=mutator.js.map","/**\n * Stores indexed strings that are used in postMessage() calls from the worker.\n */\nexport class StringContext {\n    strings;\n    constructor() {\n        this.strings = [];\n    }\n    /**\n     * Return a string for the specified index.\n     * @param index string index to retrieve.\n     * @return string in map for the index.\n     */\n    get(index) {\n        return this.strings[index] || '';\n    }\n    hasIndex(index) {\n        return this.strings[index] !== undefined;\n    }\n    /**\n     * Stores a string in mapping and returns the index of the location.\n     * @param value string to store\n     * @return {number}\n     */\n    store(value) {\n        this.strings.push(value);\n        return this.strings.length - 1;\n    }\n    /**\n     * Stores a set of strings.\n     * @param values\n     */\n    storeValues(values) {\n        values.forEach((v) => this.store(v));\n    }\n}\n//# sourceMappingURL=strings.js.map","import { applyDefaultInputListener, sendValueChangeOnAttributeMutation } from './commands/event-subscription';\nconst NODES_ALLOWED_TO_TRANSMIT_TEXT_CONTENT = [8 /* NodeType.COMMENT_NODE */, 3 /* NodeType.TEXT_NODE */];\n/**\n * Serializes a DOM element for transport to the worker.\n * @param element\n * @param minimizeString Function for minimizing strings for optimized ferrying across postMessage.\n */\nfunction createHydrateableNode(element, minimizeString, hydrateFilter, workerContext) {\n    const filteredChildNodes = [].slice.call(element.childNodes).filter(hydrateFilter);\n    const hydrated = {\n        [7 /* TransferrableKeys.index */]: element._index_,\n        [11 /* TransferrableKeys.transferred */]: 0 /* NumericBoolean.FALSE */,\n        [0 /* TransferrableKeys.nodeType */]: element.nodeType,\n        [1 /* TransferrableKeys.localOrNodeName */]: minimizeString(element.localName || element.nodeName),\n        [4 /* TransferrableKeys.childNodes */]: filteredChildNodes.map((child) => createHydrateableNode(child, minimizeString, hydrateFilter, workerContext)),\n        [2 /* TransferrableKeys.attributes */]: [].map.call(element.attributes || [], (attribute) => [\n            minimizeString(attribute.namespaceURI || 'null'),\n            minimizeString(attribute.name),\n            minimizeString(attribute.value),\n        ]),\n    };\n    if (element.namespaceURI != null) {\n        hydrated[6 /* TransferrableKeys.namespaceURI */] = minimizeString(element.namespaceURI);\n    }\n    if (NODES_ALLOWED_TO_TRANSMIT_TEXT_CONTENT.includes(element.nodeType) && element.textContent !== null) {\n        hydrated[5 /* TransferrableKeys.textContent */] = minimizeString(element.textContent);\n    }\n    applyDefaultInputListener(workerContext, element);\n    sendValueChangeOnAttributeMutation(workerContext, element);\n    return hydrated;\n}\n/**\n * @param element\n */\nexport function createHydrateableRootNode(element, config, workerContext) {\n    const hydrateFilter = config.hydrateFilter || (() => true);\n    const strings = [];\n    const stringMap = new Map();\n    const storeString = (value) => {\n        if (stringMap.has(value)) {\n            // Safe to cast since we verified the mapping contains the value.\n            return stringMap.get(value);\n        }\n        const count = strings.length;\n        stringMap.set(value, count);\n        strings.push(value);\n        return count;\n    };\n    const skeleton = createHydrateableNode(element, storeString, hydrateFilter, workerContext);\n    return { skeleton, strings };\n}\n/**\n * @param element\n */\nexport function createReadableHydrateableRootNode(element, config, workerContext) {\n    // \"Readable\" variant doesn't do any string minimization so we can output it for debugging purposes.\n    // Note that this intentionally breaks the type contract of createHydrateableNode() and HydrateableNode.\n    return createHydrateableNode(element, ((value) => value), config.hydrateFilter || (() => true), workerContext);\n}\n//# sourceMappingURL=serialize.js.map","/**\n * @fileoverview Converts index-based worker messages to human-readable objects.\n *\n * Requires manual upkeep to keep consistency with messages and enums.\n * This allows us to continue using 'const enum' for enum inlining.\n * @see https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md#9.4\n */\nimport { createReadableHydrateableRootNode } from './serialize';\n/**\n * @param element\n */\nexport const readableHydrateableRootNode = (element, config, workerContext) => readableHydrateableNode(createReadableHydrateableRootNode(element, config, workerContext));\n/**\n * @param nodeContext {NodeContext}\n * @param node {TransferredNode}\n */\nexport const readableTransferredNode = (nodeContext, node) => (node != null && nodeContext.getNode(node[0 /* TransferrableNodeIndex.Index */])) || node;\n/**\n * @param node\n */\nfunction readableHydrateableNode(node) {\n    const out = {\n        nodeType: node[0 /* TransferrableKeys.nodeType */],\n        name: node[1 /* TransferrableKeys.localOrNodeName */],\n        attributes: null,\n        childNodes: null,\n    };\n    const attributes = node[2 /* TransferrableKeys.attributes */];\n    if (attributes) {\n        out.attributes = attributes.map((attr) => ({\n            name: attr[1],\n            value: attr[2],\n        }));\n    }\n    const childNodes = node[4 /* TransferrableKeys.childNodes */];\n    if (childNodes) {\n        out.childNodes = childNodes.map(readableHydrateableNode);\n    }\n    return out;\n}\n/**\n * @param message {MessageToWorker}\n */\nconst isEvent = (message) => message[12 /* TransferrableKeys.type */] == 1 /* MessageType.EVENT */;\nconst isValueSync = (message) => message[12 /* TransferrableKeys.type */] == 4 /* MessageType.SYNC */;\nconst isBoundingClientRect = (message) => message[12 /* TransferrableKeys.type */] === 6 /* MessageType.GET_BOUNDING_CLIENT_RECT */;\nconst isGetStorage = (message) => message[12 /* TransferrableKeys.type */] === 11 /* MessageType.GET_STORAGE */;\n/**\n * @param nodeContext {NodeContext}\n * @param event {TransferrableEvent}\n */\nfunction readableTransferrableEvent(nodeContext, event) {\n    const value = (item) => {\n        if (typeof item === 'number' || typeof item === 'boolean') {\n            return item !== undefined ? item : null;\n        }\n        return item !== undefined && item !== null ? readableTransferredNode(nodeContext, item) : null;\n    };\n    return {\n        type: event[12 /* TransferrableKeys.type */],\n        bubbles: value(event[25 /* TransferrableKeys.bubbles */]),\n        cancelable: value(event[26 /* TransferrableKeys.cancelable */]),\n        cancelBubble: value(event[27 /* TransferrableKeys.cancelBubble */]),\n        defaultPrevented: value(event[29 /* TransferrableKeys.defaultPrevented */]),\n        eventPhase: value(event[30 /* TransferrableKeys.eventPhase */]),\n        isTrusted: value(event[31 /* TransferrableKeys.isTrusted */]),\n        returnValue: value(event[32 /* TransferrableKeys.returnValue */]),\n        currentTarget: value(event[28 /* TransferrableKeys.currentTarget */]),\n        target: value(event[13 /* TransferrableKeys.target */]),\n        scoped: value(event[34 /* TransferrableKeys.scoped */]),\n        keyCode: value(event[35 /* TransferrableKeys.keyCode */]),\n    };\n}\n/**\n * @param nodeContext {NodeContext}\n * @param value {TransferrableSyncValue}\n */\nfunction readableTransferrableSyncValue(nodeContext, value) {\n    const index = value[7 /* TransferrableKeys.index */];\n    return {\n        target: nodeContext.getNode(index) || index,\n        value: value[21 /* TransferrableKeys.value */],\n    };\n}\n/**\n * @param message\n */\nexport function readableMessageToWorker(nodeContext, message) {\n    if (isEvent(message)) {\n        const event = message[39 /* TransferrableKeys.event */];\n        return {\n            type: 'EVENT',\n            event: readableTransferrableEvent(nodeContext, event),\n        };\n    }\n    else if (isValueSync(message)) {\n        const sync = message[40 /* TransferrableKeys.sync */];\n        return {\n            type: 'SYNC',\n            sync: readableTransferrableSyncValue(nodeContext, sync),\n        };\n    }\n    else if (isBoundingClientRect(message)) {\n        return {\n            type: 'GET_BOUNDING_CLIENT_RECT',\n            target: readableTransferredNode(nodeContext, message[13 /* TransferrableKeys.target */]),\n        };\n    }\n    else if (isGetStorage(message)) {\n        return {\n            type: 'GET_STORAGE',\n            key: message[74 /* TransferrableKeys.storageKey */],\n            location: message[75 /* TransferrableKeys.storageLocation */],\n            value: message[21 /* TransferrableKeys.value */],\n        };\n    }\n    else {\n        return 'Unrecognized MessageToWorker type: ' + message[12 /* TransferrableKeys.type */];\n    }\n}\n//# sourceMappingURL=debugging.js.map","import { createHydrateableRootNode } from './serialize';\nimport { readableHydrateableRootNode, readableMessageToWorker } from './debugging';\nimport { IframeWorker } from './iframe-worker';\nexport class WorkerContext {\n    [55 /* TransferrableKeys.worker */];\n    nodeContext;\n    config;\n    /**\n     * @param baseElement\n     * @param nodeContext\n     * @param workerDOMScript\n     * @param authorScript\n     * @param config\n     */\n    constructor(baseElement, nodeContext, workerDOMScript, authorScript, config) {\n        this.nodeContext = nodeContext;\n        this.config = config;\n        const { skeleton, strings } = createHydrateableRootNode(baseElement, config, this);\n        const cssKeys = [];\n        const globalEventHandlerKeys = [];\n        // TODO(choumx): Sync read of all localStorage and sessionStorage a possible performance bottleneck?\n        const localStorageInit = getStorageInit('localStorage');\n        const sessionStorageInit = getStorageInit('sessionStorage');\n        for (const key in baseElement.style) {\n            cssKeys.push(key);\n        }\n        for (const key in baseElement) {\n            if (key.startsWith('on')) {\n                globalEventHandlerKeys.push(key);\n            }\n        }\n        // We skip assigning the globals for localStorage and sessionStorage because\n        // We've already installed them. Also, accessing them can throw in incognito mode.\n        const code = `\r\n      'use strict';\r\n      (function(){\r\n        ${workerDOMScript}\r\n        self['window'] = self;\r\n        var workerDOM = WorkerThread.workerDOM;\r\n        WorkerThread.hydrate(\r\n          workerDOM.document,\r\n          ${JSON.stringify(strings)},\r\n          ${JSON.stringify(skeleton)},\r\n          ${JSON.stringify(cssKeys)},\r\n          ${JSON.stringify(globalEventHandlerKeys)},\r\n          [${window.innerWidth}, ${window.innerHeight}],\r\n          ${JSON.stringify(localStorageInit)},\r\n          ${JSON.stringify(sessionStorageInit)}\r\n        );\r\n        workerDOM.document[${59 /* TransferrableKeys.observe */}](this);\r\n        Object.assign(self, workerDOM);\r\n      }).call(self);\r\n      ${authorScript}\r\n      //# sourceURL=${encodeURI(config.authorURL)}`;\n        if (!config.sandbox) {\n            this[55 /* TransferrableKeys.worker */] = new Worker(URL.createObjectURL(new Blob([code])));\n        }\n        else if (IS_AMP) {\n            this[55 /* TransferrableKeys.worker */] = new IframeWorker(URL.createObjectURL(new Blob([code])), config.sandbox.iframeUrl);\n        }\n        if (WORKER_DOM_DEBUG) {\n            console.info('debug', 'hydratedNode', readableHydrateableRootNode(baseElement, config, this));\n        }\n        if (config.onCreateWorker) {\n            config.onCreateWorker(baseElement, strings, skeleton, cssKeys);\n        }\n    }\n    /**\n     * Returns a Promise that resolves when the Worker is ready to receive messages.\n     * @returns {Promise<void>}\n     */\n    ready() {\n        return this.worker.readyPromise || Promise.resolve();\n    }\n    /**\n     * Returns the private worker.\n     */\n    get worker() {\n        return this[55 /* TransferrableKeys.worker */];\n    }\n    /**\n     * @param message\n     */\n    messageToWorker(message, transferables) {\n        if (WORKER_DOM_DEBUG) {\n            console.info('debug', 'messageToWorker', readableMessageToWorker(this.nodeContext, message));\n        }\n        if (this.config.onSendMessage) {\n            this.config.onSendMessage(message);\n        }\n        this.worker.postMessage(message, transferables || []);\n    }\n}\nfunction getStorageInit(type, sanitizer) {\n    try {\n        if (!sanitizer) {\n            return { storage: window[type], errorMsg: null };\n        }\n        return {\n            storage: sanitizer.getStorage(type == 'localStorage' ? 0 /* StorageLocation.Local */ : 1 /* StorageLocation.Session */),\n            errorMsg: null,\n        };\n    }\n    catch (err) {\n        return { errorMsg: err.message, storage: null };\n    }\n}\n//# sourceMappingURL=worker.js.map","/**\n * Stores objects that have their behavior handled from the main-thread. Each object is associated to a unique ID.\n */\nexport class ObjectContext {\n    objects;\n    constructor() {\n        this.objects = new Map();\n    }\n    store(id, obj) {\n        this.objects.set(id, obj);\n    }\n    get(id) {\n        const obj = this.objects.get(id);\n        if (obj) {\n            return obj;\n        }\n        else {\n            throw new Error('Object with id (' + id + ') does not exist.');\n        }\n    }\n}\n//# sourceMappingURL=object-context.js.map","import { registerPromise } from './commands/function';\n/**\n * An ExportedWorker is returned by the upgradeElement API.\n * For the most part, it delegates to the underlying Worker.\n *\n * It notably removes `postMessage` support and adds `callFunction`.\n */\nexport class ExportedWorker {\n    workerContext_;\n    config;\n    constructor(workerContext, config) {\n        this.workerContext_ = workerContext;\n        this.config = config;\n    }\n    /**\n     * Calls a function in the worker and returns a promise with the result.\n     * @param functionIdentifer\n     * @param functionArguments\n     */\n    callFunction(functionIdentifer, ...functionArguments) {\n        if (!this.config.executorsAllowed.includes(13 /* TransferrableMutationType.FUNCTION_CALL */)) {\n            throw new Error(`[worker-dom]: Error calling ${functionIdentifer}. You must enable the FUNCTION_CALL executor within the config.`);\n        }\n        const { promise, index } = registerPromise();\n        const msg = {\n            [12 /* TransferrableKeys.type */]: 12 /* MessageType.FUNCTION */,\n            [77 /* TransferrableKeys.functionIdentifier */]: functionIdentifer,\n            [78 /* TransferrableKeys.functionArguments */]: JSON.stringify(functionArguments),\n            [7 /* TransferrableKeys.index */]: index,\n        };\n        this.workerContext_.messageToWorker(msg);\n        return promise;\n    }\n    set onerror(handler) {\n        this.workerContext_.worker.onerror = handler;\n    }\n    terminate() {\n        this.workerContext_.worker.terminate();\n    }\n}\n//# sourceMappingURL=exported-worker.js.map","import { MutatorProcessor } from './mutator';\nimport { NodeContext } from './nodes';\nimport { StringContext } from './strings';\nimport { normalizeConfiguration } from './configuration';\nimport { WorkerContext } from './worker';\nimport { ObjectContext } from './object-context';\nimport { ExportedWorker } from './exported-worker';\nconst ALLOWABLE_MESSAGE_TYPES = [3 /* MessageType.MUTATE */, 2 /* MessageType.HYDRATE */];\n/**\n * @param baseElement\n * @param authorScriptURL\n * @param workerDOMURL\n * @param callbacks\n * @param sanitizer\n * @param debug\n */\nexport function fetchAndInstall(baseElement, config) {\n    const fetchPromise = Promise.all([\n        // TODO(KB): Fetch Polyfill for IE11.\n        fetch(config.domURL).then((response) => response.text()),\n        fetch(config.authorURL).then((response) => response.text()),\n    ]);\n    return install(fetchPromise, baseElement, config);\n}\n/**\n * @param fetchPromise\n * @param baseElement\n * @param config\n */\nexport function install(fetchPromise, baseElement, config) {\n    const mode = baseElement.dataset['shadowDom'];\n    if (mode === 'open' || mode === 'closed') {\n        const shadowRoot = baseElement.attachShadow({ mode });\n        const clonedElement = baseElement.cloneNode(true);\n        shadowRoot.appendChild(clonedElement);\n        baseElement = clonedElement;\n    }\n    const stringContext = new StringContext();\n    const objectContext = new ObjectContext();\n    const nodeContext = new NodeContext(stringContext, baseElement);\n    const normalizedConfig = normalizeConfiguration(config);\n    return fetchPromise.then(([domScriptContent, authorScriptContent]) => {\n        if (domScriptContent && authorScriptContent && config.authorURL) {\n            const workerContext = new WorkerContext(baseElement, nodeContext, domScriptContent, authorScriptContent, normalizedConfig);\n            const mutatorContext = new MutatorProcessor(stringContext, nodeContext, workerContext, normalizedConfig, objectContext);\n            workerContext.worker.onmessage = (message) => {\n                const { data } = message;\n                if (!ALLOWABLE_MESSAGE_TYPES.includes(data[12 /* TransferrableKeys.type */])) {\n                    return;\n                }\n                mutatorContext.mutate(data[54 /* TransferrableKeys.phase */], data[37 /* TransferrableKeys.nodes */], data[41 /* TransferrableKeys.strings */], new Uint16Array(data[36 /* TransferrableKeys.mutations */]));\n                if (config.onReceiveMessage) {\n                    config.onReceiveMessage(message);\n                }\n            };\n            return workerContext.ready().then(() => new ExportedWorker(workerContext, normalizedConfig));\n        }\n        return null;\n    });\n}\n//# sourceMappingURL=install.js.map","import { fetchAndInstall, install } from './install';\nexport function upgradeElement(baseElement, domURL) {\n    const authorURL = baseElement.getAttribute('src');\n    if (authorURL) {\n        return fetchAndInstall(baseElement, {\n            authorURL,\n            domURL,\n        });\n    }\n    return Promise.resolve(null);\n}\nexport { install };\n//# sourceMappingURL=index.js.map"],"names":["OffscreenCanvasProcessor","strings","nodeContext","workerContext","objectContext","config","allowedExecution","executorsAllowed","includes","execute","mutations","startPosition","allowedMutation","targetIndex","target","getNode","offscreen","transferControlToOffscreen","messageToWorker","_index_","console","error","print","isUserVisibleMutation","type","DefaultAllowedMutations","nodeListEach","list","callback","Array","prototype","forEach","call","BASE_ELEMENT_INDEX","NodeContext","constructor","stringContext","baseElement","count","nodes","createNodes","buffer","sanitizer","nodeBuffer","Uint16Array","nodeBufferLength","length","iterator","node","document","createTextNode","get","createComment","createDocumentFragment","nodeName","createElementNS","createElement","sanitize","storeNode","id","storeNodes","childNodes","n","Map","monitoredNodes","shouldTrackChanges","applyDefaultInputListener","oninput","fireValueChange","sendValueChangeOnAttributeMutation","MutationObserver","map","mutation","observe","attributes","set","value","fireResizeChange","cachedWindowSize","createTransferrableTouchList","touchList","Object","values","touch","identifier","screenX","screenY","clientX","clientY","pageX","pageY","EventSubscriptionProcessor","knownListeners","window","innerWidth","innerHeight","eventHandler","index","preventDefault","event","currentTarget","bubbles","cancelable","cancelBubble","defaultPrevented","eventPhase","isTrusted","returnValue","timeStamp","keyCode","undefined","offsetX","offsetY","touches","changedTouches","processListenerChange","addEvent","eventIndex","Boolean","addEventListener","removeEventListener","inputEventSubscribed","isChangeEvent","onchange","addEventListenerCount","removeEventListenerCount","addEventListenersPosition","REMOVE_EVENT_SUBSCRIPTION_LENGTH","endPosition","ADD_EVENT_SUBSCRIPTION_LENGTH","isRemoveEvent","BoundingClientRectProcessor","boundingRect","getBoundingClientRect","top","right","bottom","left","width","height","ChildListProcessor","appendNodeCount","removeNodeCount","slice","removeId","remove","addId","nextSibling","newNode","insertBefore","removedNodes","from","addedNodes","AttributeProcessor","getValue","attributeName","setAttribute","removeAttribute","CharacterDataProcessor","textContent","PropertyProcessor","name","setProperty","String","LongTaskExecutor","currentResolver","longTask","newResolver","Promise","resolve","f32","Float32Array","u16","deserializeTransferrableObject","offset","args","i","push","size","des","ObjectMutationProcessor","functionName","argCount","targetOffset","deserializedTarget","argsOffset","isSetter","ObjectCreationProcessor","Error","objectId","store","ImageBitmapProcessor","self","createImageBitmap","then","imageBitmap","StorageProcessor","location","key","getStorage","message","setStorage","storage","localStorage","sessionStorage","clear","removeItem","setItem","operation","keyIndex","valueIndex","fnCallCount","promiseMap","registerPromise","reject","promise","res","rej","Number","MAX_VALUE","FunctionProcessor","status","parsed","hasIndex","JSON","parse","ScrollIntoViewProcessor","scrollIntoView","MutatorProcessor","mutationQueue","pendingMutations","mutationPumpFunction","executors","syncFlush","allowVisibleMutations","disallowedMutations","mutationArray","operationStart","mutationType","mutationPump","sharedLongTaskProcessor","apply","mutate","phase","stringValues","storeValues","concat","StringContext","NODES_ALLOWED_TO_TRANSMIT_TEXT_CONTENT","createHydrateableNode","element","minimizeString","hydrateFilter","filteredChildNodes","filter","hydrated","nodeType","localName","child","attribute","namespaceURI","createHydrateableRootNode","stringMap","storeString","has","readableHydrateableRootNode","readableHydrateableNode","createReadableHydrateableRootNode","readableTransferredNode","out","attr","isEvent","isValueSync","isBoundingClientRect","isGetStorage","readableTransferrableEvent","item","scoped","readableTransferrableSyncValue","readableMessageToWorker","WorkerContext","workerDOMScript","authorScript","skeleton","cssKeys","globalEventHandlerKeys","localStorageInit","getStorageInit","sessionStorageInit","style","startsWith","code","authorURL","sandbox","Worker","URL","createObjectURL","Blob","info","onCreateWorker","ready","worker","readyPromise","ObjectContext","objects","obj","ExportedWorker","workerContext_","callFunction","functionIdentifer","functionArguments","msg","stringify","ALLOWABLE_MESSAGE_TYPES","fetchAndInstall","fetchPromise","all","fetch","domURL","response","text","install","mode","dataset","shadowRoot","attachShadow","clonedElement","cloneNode","appendChild","normalizedConfig","normalizeConfiguration","domScriptContent","authorScriptContent","mutatorContext","onmessage","data","upgradeElement","getAttribute"],"mappings":"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"}