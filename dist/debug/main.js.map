{"version":3,"file":"main.js","sources":["../../output/main-thread/commands/offscreen-canvas.js","../../output/transfer/TransferrableMutation.js","../../output/main-thread/nodes.js","../../output/main-thread/commands/event-subscription.js","../../output/main-thread/commands/bounding-client-rect.js","../../output/main-thread/commands/child-list.js","../../output/main-thread/commands/attribute.js","../../output/main-thread/commands/character-data.js","../../output/main-thread/commands/property.js","../../output/main-thread/commands/long-task.js","../../output/main-thread/deserializeTransferrableObject.js","../../output/main-thread/commands/object-mutation.js","../../output/main-thread/commands/object-creation.js","../../output/main-thread/commands/image-bitmap.js","../../output/main-thread/commands/storage.js","../../output/main-thread/commands/function.js","../../output/main-thread/commands/scroll-into-view.js","../../output/main-thread/mutator.js","../../output/main-thread/strings.js","../../output/main-thread/serialize.js","../../output/main-thread/debugging.js","../../output/main-thread/iframe-worker.js","../../output/main-thread/worker.js","../../output/main-thread/object-context.js","../../output/main-thread/exported-worker.js","../../output/main-thread/install.js","../../output/main-thread/index.js"],"sourcesContent":["export const OffscreenCanvasProcessor = (strings, nodeContext, workerContext, objectContext, config) => {\n    const allowedExecution = config.executorsAllowed.includes(8 /* TransferrableMutationType.OFFSCREEN_CANVAS_INSTANCE */);\n    return {\n        execute(mutations, startPosition, allowedMutation) {\n            if (allowedExecution && allowedMutation) {\n                const targetIndex = mutations[startPosition + 1 /* OffscreenCanvasMutationIndex.Target */];\n                const target = nodeContext.getNode(targetIndex);\n                if (target) {\n                    const offscreen = target.transferControlToOffscreen();\n                    workerContext.messageToWorker({\n                        [12 /* TransferrableKeys.type */]: 9 /* MessageType.OFFSCREEN_CANVAS_INSTANCE */,\n                        [13 /* TransferrableKeys.target */]: [target._index_],\n                        [38 /* TransferrableKeys.data */]: offscreen, // Object, an OffscreenCanvas\n                    }, [offscreen]);\n                }\n                else {\n                    console.error(`'OFFSCREEN_CANVAS_INSTANCE': getNode(${targetIndex}) is null.`);\n                }\n            }\n            return startPosition + 2 /* OffscreenCanvasMutationIndex.End */;\n        },\n        print(mutations, startPosition, target) {\n            return {\n                type: 'OFFSCREEN_CANVAS_INSTANCE',\n                target,\n                allowedExecution,\n            };\n        },\n    };\n};\n//# sourceMappingURL=offscreen-canvas.js.map","/**\n * Returns true if the mutation type can cause a user-visible change to the DOM.\n * @param type\n */\nexport const isUserVisibleMutation = (type) => {\n    switch (type) {\n        case 4 /* TransferrableMutationType.EVENT_SUBSCRIPTION */:\n        case 5 /* TransferrableMutationType.GET_BOUNDING_CLIENT_RECT */:\n        case 6 /* TransferrableMutationType.LONG_TASK_START */:\n        case 7 /* TransferrableMutationType.LONG_TASK_END */:\n        case 12 /* TransferrableMutationType.STORAGE */:\n        case 8 /* TransferrableMutationType.OFFSCREEN_CANVAS_INSTANCE */:\n        case 13 /* TransferrableMutationType.FUNCTION_CALL */:\n            return false;\n        default:\n            return true;\n    }\n};\nexport const DefaultAllowedMutations = [\n    0 /* TransferrableMutationType.ATTRIBUTES */,\n    1 /* TransferrableMutationType.CHARACTER_DATA */,\n    2 /* TransferrableMutationType.CHILD_LIST */,\n    3 /* TransferrableMutationType.PROPERTIES */,\n    4 /* TransferrableMutationType.EVENT_SUBSCRIPTION */,\n    5 /* TransferrableMutationType.GET_BOUNDING_CLIENT_RECT */,\n    6 /* TransferrableMutationType.LONG_TASK_START */,\n    7 /* TransferrableMutationType.LONG_TASK_END */,\n    8 /* TransferrableMutationType.OFFSCREEN_CANVAS_INSTANCE */,\n    9 /* TransferrableMutationType.OBJECT_MUTATION */,\n    10 /* TransferrableMutationType.OBJECT_CREATION */,\n    11 /* TransferrableMutationType.IMAGE_BITMAP_INSTANCE */,\n    12 /* TransferrableMutationType.STORAGE */,\n    13 /* TransferrableMutationType.FUNCTION_CALL */,\n    14 /* TransferrableMutationType.SCROLL_INTO_VIEW */,\n];\nexport const ReadableMutationType = {\n    0: 'ATTRIBUTES',\n    1: 'CHARACTER_DATA',\n    2: 'CHILD_LIST',\n    3: 'PROPERTIES',\n    4: 'EVENT_SUBSCRIPTION',\n    5: 'GET_BOUNDING_CLIENT_RECT',\n    6: 'LONG_TASK_START',\n    7: 'LONG_TASK_END',\n    8: 'OFFSCREEN_CANVAS_INSTANCE',\n    9: 'OBJECT_MUTATION',\n    10: 'OBJECT_CREATION',\n    11: 'IMAGE_BITMAP_INSTANCE',\n    12: 'STORAGE',\n    13: 'FUNCTION_INVOCATION',\n    14: 'SCROLL_INTO_VIEW',\n};\n//# sourceMappingURL=TransferrableMutation.js.map","/**\n * IE11 doesn't support NodeList.prototype.forEach\n * https://developer.mozilla.org/en-US/docs/Web/API/NodeList/forEach\n * @param list NodeList to iterate over\n * @param callback method to call with each node\n */\nconst nodeListEach = (list, callback) => Array.prototype.forEach.call(list, callback);\nexport const BASE_ELEMENT_INDEX = 1;\nexport class NodeContext {\n    baseElement;\n    stringContext;\n    count;\n    nodes;\n    /**\n     * Called when initializing a Worker, ensures the nodes in baseElement are\n     * known for transmission into the Worker and future mutation events from the\n     * Worker.\n     * @param baseElement Element that will be controlled by a Worker\n     */\n    constructor(stringContext, baseElement) {\n        this.count = 2;\n        this.stringContext = stringContext;\n        // The nodes map is populated with two default values pointing to baseElement.\n        // These are [document, document.body] from the worker.\n        this.nodes = new Map([\n            [BASE_ELEMENT_INDEX, baseElement],\n            [2, baseElement],\n        ]);\n        this.baseElement = baseElement;\n        // To ensure a lookup works correctly from baseElement\n        // add an index equal to the background thread document.body.\n        baseElement._index_ = 2;\n        // Lastly, it's important while initializing the document that we store\n        // the default nodes present in the server rendered document.\n        nodeListEach(baseElement.childNodes, (n) => this.storeNodes(n));\n    }\n    createNodes = (buffer, sanitizer) => {\n        const nodeBuffer = new Uint16Array(buffer);\n        const nodeBufferLength = nodeBuffer.length;\n        for (let iterator = 0; iterator < nodeBufferLength; iterator += 5 /* TransferrableNodeIndex.End */) {\n            let node;\n            if (nodeBuffer[iterator + 1 /* TransferrableNodeIndex.NodeType */] === 3 /* NodeType.TEXT_NODE */) {\n                node = document.createTextNode(this.stringContext.get(nodeBuffer[iterator + 3 /* TransferrableNodeIndex.TextContent */]));\n            }\n            else if (nodeBuffer[iterator + 1 /* TransferrableNodeIndex.NodeType */] === 8 /* NodeType.COMMENT_NODE */) {\n                node = document.createComment(this.stringContext.get(nodeBuffer[iterator + 3 /* TransferrableNodeIndex.TextContent */]));\n            }\n            else if (nodeBuffer[iterator + 1 /* TransferrableNodeIndex.NodeType */] === 11 /* NodeType.DOCUMENT_FRAGMENT_NODE */) {\n                node = document.createDocumentFragment();\n            }\n            else {\n                const nodeName = this.stringContext.get(nodeBuffer[iterator + 2 /* TransferrableNodeIndex.NodeName */]);\n                node =\n                    nodeBuffer[iterator + 4 /* TransferrableNodeIndex.Namespace */] !== 0\n                        ? document.createElementNS(this.stringContext.get(nodeBuffer[iterator + 4 /* TransferrableNodeIndex.Namespace */]), nodeName)\n                        : document.createElement(nodeName);\n                // TODO(KB): Restore Properties\n                // skeleton.properties.forEach(property => {\n                //   node[`${property.name}`] = property.value;\n                // });\n                // ((skeleton as TransferrableElement)[TransferrableKeys.childNodes] || []).forEach(childNode => {\n                //   if (childNode[TransferrableKeys.transferred] === NumericBoolean.FALSE) {\n                //     node.appendChild(this.createNode(childNode as TransferrableNode));\n                //   }\n                // });\n                // If `node` is removed by the sanitizer, don't store it and return null.\n                if (sanitizer && !sanitizer.sanitize(node)) {\n                    continue;\n                }\n            }\n            this.storeNode(node, nodeBuffer[iterator]);\n        }\n    };\n    /**\n     * Returns the real DOM Element corresponding to a serialized Element object.\n     * @param id\n     * @return RenderableElement | null\n     */\n    getNode = (id) => {\n        const node = this.nodes.get(id);\n        if (node && node.nodeName === 'BODY') {\n            // If the node requested is the \"BODY\"\n            // Then we return the base node this specific <amp-script> comes from.\n            // This encapsulates each <amp-script> node.\n            return this.baseElement;\n        }\n        return node;\n    };\n    /**\n     * Store the requested node and all of its children.\n     * @param node node to store.\n     */\n    storeNodes = (node) => {\n        this.storeNode(node, ++this.count);\n        nodeListEach(node.childNodes, (n) => this.storeNodes(n));\n    };\n    /**\n     * Establish link between DOM `node` and worker-generated identifier `id`.\n     *\n     * These _shouldn't_ collide between instances of <amp-script> since\n     * each element creates it's own pool on both sides of the worker\n     * communication bridge.\n     * @param node\n     * @param id\n     */\n    storeNode(node, id) {\n        node._index_ = id;\n        this.nodes.set(id, node);\n    }\n}\n//# sourceMappingURL=nodes.js.map","import { ADD_EVENT_SUBSCRIPTION_LENGTH, REMOVE_EVENT_SUBSCRIPTION_LENGTH, } from '../../transfer/TransferrableEvent';\nimport { BASE_ELEMENT_INDEX } from '../nodes';\n/**\n * Monitoring Nodes attribute changes requires a Mutation Observer.\n * We store the nodes being monitored to avoid creating more than one Observer\n * per Element.\n */\nconst monitoredNodes = new Map();\n/**\n * Instead of a whitelist of elements that need their value tracked, use the existence\n * of a property called value to drive the decision.\n * @param node node to check if values should be tracked.\n * @return boolean if the node should have its value property tracked.\n */\nconst shouldTrackChanges = (node) => node && 'value' in node;\n/**\n * When a node that has a value needing synced doesn't already have an event listener\n * listening for input values, ensure the value is synced with a default listener.\n * @param worker whom to dispatch value toward.\n * @param node node to listen to value changes on.\n */\nexport const applyDefaultInputListener = (workerContext, node) => {\n    if (shouldTrackChanges(node) && node.oninput === null) {\n        node.oninput = () => fireValueChange(workerContext, node);\n    }\n};\n/**\n * Use a MutationObserver to capture value changes based on Attribute modification (frequently used by frameworks).\n * @param worker whom to dispatch value toward.\n * @param node node to listen to value changes on.\n */\nexport const sendValueChangeOnAttributeMutation = (workerContext, node) => {\n    if (shouldTrackChanges(node) && !monitoredNodes.get(node)) {\n        new MutationObserver((mutations) => mutations.map((mutation) => fireValueChange(workerContext, mutation.target))).observe(node, { attributes: true });\n        monitoredNodes.set(node, true);\n    }\n};\n/**\n * Tell WorkerDOM what the value is for a Node.\n * @param worker whom to dispatch value toward.\n * @param node where to get the value from.\n */\nconst fireValueChange = (workerContext, node) => workerContext.messageToWorker({\n    [12 /* TransferrableKeys.type */]: 4 /* MessageType.SYNC */,\n    [40 /* TransferrableKeys.sync */]: {\n        [7 /* TransferrableKeys.index */]: node._index_,\n        [21 /* TransferrableKeys.value */]: node.value,\n    },\n});\n/**\n * Tell WorkerDOM what the window dimensions are.\n * @param workerContext\n * @param cachedWindowSize\n */\nconst fireResizeChange = (workerContext, cachedWindowSize) => workerContext.messageToWorker({\n    [12 /* TransferrableKeys.type */]: 5 /* MessageType.RESIZE */,\n    [40 /* TransferrableKeys.sync */]: cachedWindowSize,\n});\n/**\n * Convert a TouchList into a TransferrableTouchList\n * @param touchList\n */\nconst createTransferrableTouchList = (touchList) => Object.values(touchList).map((touch) => [\n    touch.identifier,\n    touch.screenX,\n    touch.screenY,\n    touch.clientX,\n    touch.clientY,\n    touch.pageX,\n    touch.pageY,\n    touch.target._index_,\n]);\nexport const EventSubscriptionProcessor = (strings, nodeContext, workerContext, objectContext, config) => {\n    const knownListeners = [];\n    const allowedExecution = config.executorsAllowed.includes(4 /* TransferrableMutationType.EVENT_SUBSCRIPTION */);\n    let cachedWindowSize = [window.innerWidth, window.innerHeight];\n    /**\n     * Register an event handler for dispatching events to worker thread\n     * @param worker whom to dispatch events toward\n     * @param index node index the event comes from (used to dispatchEvent in worker thread).\n     * @return eventHandler function consuming event and dispatching to worker thread\n     */\n    const eventHandler = (index, preventDefault) => (event) => {\n        if (preventDefault) {\n            event.preventDefault();\n        }\n        if (shouldTrackChanges(event.currentTarget)) {\n            fireValueChange(workerContext, event.currentTarget);\n        }\n        else if (event.type === 'resize') {\n            const { innerWidth, innerHeight } = window;\n            if (cachedWindowSize[0] === innerWidth && cachedWindowSize[1] === innerHeight) {\n                return;\n            }\n            cachedWindowSize = [window.innerWidth, window.innerHeight];\n            fireResizeChange(workerContext, cachedWindowSize);\n        }\n        workerContext.messageToWorker({\n            [12 /* TransferrableKeys.type */]: 1 /* MessageType.EVENT */,\n            [39 /* TransferrableKeys.event */]: {\n                [7 /* TransferrableKeys.index */]: index,\n                [25 /* TransferrableKeys.bubbles */]: event.bubbles,\n                [26 /* TransferrableKeys.cancelable */]: event.cancelable,\n                [27 /* TransferrableKeys.cancelBubble */]: event.cancelBubble,\n                [28 /* TransferrableKeys.currentTarget */]: [event.currentTarget._index_ || 0],\n                [29 /* TransferrableKeys.defaultPrevented */]: event.defaultPrevented,\n                [30 /* TransferrableKeys.eventPhase */]: event.eventPhase,\n                [31 /* TransferrableKeys.isTrusted */]: event.isTrusted,\n                [32 /* TransferrableKeys.returnValue */]: event.returnValue,\n                [13 /* TransferrableKeys.target */]: [event.target._index_ || 0],\n                [33 /* TransferrableKeys.timeStamp */]: event.timeStamp,\n                [12 /* TransferrableKeys.type */]: event.type,\n                [35 /* TransferrableKeys.keyCode */]: 'keyCode' in event ? event.keyCode : undefined,\n                [60 /* TransferrableKeys.pageX */]: 'pageX' in event ? event.pageX : undefined,\n                [61 /* TransferrableKeys.pageY */]: 'pageY' in event ? event.pageY : undefined,\n                [65 /* TransferrableKeys.offsetX */]: 'offsetX' in event ? event.offsetX : undefined,\n                [66 /* TransferrableKeys.offsetY */]: 'offsetY' in event ? event.offsetY : undefined,\n                [62 /* TransferrableKeys.touches */]: 'touches' in event ? createTransferrableTouchList(event.touches) : undefined,\n                [63 /* TransferrableKeys.changedTouches */]: 'changedTouches' in event ? createTransferrableTouchList(event.changedTouches) : undefined,\n            },\n        });\n    };\n    /**\n     * If the worker requests to add an event listener to 'change' for something the foreground thread is already listening to,\n     * ensure that only a single 'change' event is attached to prevent sending values multiple times.\n     * @param target node to change listeners on\n     * @param addEvent is this an 'addEvent' or 'removeEvent' change\n     * @param mutations Uint16Array for this set of changes\n     * @param iterator current location in array to perform this change on\n     */\n    const processListenerChange = (target, addEvent, mutations, iterator) => {\n        const type = strings.get(mutations[iterator]);\n        const eventIndex = mutations[iterator + 1 /* AddEventRegistrationIndex.Index */];\n        if (target === nodeContext.baseElement) {\n            if (addEvent) {\n                const preventDefault = Boolean(mutations[iterator + 5 /* AddEventRegistrationIndex.WorkerDOMPreventDefault */]);\n                addEventListener(type, (knownListeners[eventIndex] = eventHandler(BASE_ELEMENT_INDEX, preventDefault)));\n            }\n            else {\n                removeEventListener(type, knownListeners[eventIndex]);\n            }\n            return;\n        }\n        let inputEventSubscribed = target.oninput !== null;\n        const isChangeEvent = type === 'change';\n        if (addEvent) {\n            if (isChangeEvent) {\n                inputEventSubscribed = true;\n                target.onchange = null;\n            }\n            const preventDefault = Boolean(mutations[iterator + 5 /* AddEventRegistrationIndex.WorkerDOMPreventDefault */]);\n            target.addEventListener(type, (knownListeners[eventIndex] = eventHandler(target._index_, preventDefault)));\n        }\n        else {\n            if (isChangeEvent) {\n                inputEventSubscribed = false;\n            }\n            target.removeEventListener(type, knownListeners[eventIndex]);\n        }\n        if (shouldTrackChanges(target)) {\n            if (!inputEventSubscribed)\n                applyDefaultInputListener(workerContext, target);\n            sendValueChangeOnAttributeMutation(workerContext, target);\n        }\n    };\n    return {\n        execute(mutations, startPosition, allowedMutation) {\n            const addEventListenerCount = mutations[startPosition + 3 /* EventSubscriptionMutationIndex.AddEventListenerCount */];\n            const removeEventListenerCount = mutations[startPosition + 2 /* EventSubscriptionMutationIndex.RemoveEventListenerCount */];\n            const addEventListenersPosition = startPosition + 4 /* EventSubscriptionMutationIndex.Events */ + removeEventListenerCount * REMOVE_EVENT_SUBSCRIPTION_LENGTH;\n            const endPosition = startPosition +\n                4 /* EventSubscriptionMutationIndex.Events */ +\n                addEventListenerCount * ADD_EVENT_SUBSCRIPTION_LENGTH +\n                removeEventListenerCount * REMOVE_EVENT_SUBSCRIPTION_LENGTH;\n            if (allowedExecution && allowedMutation) {\n                const targetIndex = mutations[startPosition + 1 /* EventSubscriptionMutationIndex.Target */];\n                const target = nodeContext.getNode(targetIndex);\n                if (target) {\n                    let iterator = startPosition + 4 /* EventSubscriptionMutationIndex.Events */;\n                    while (iterator < endPosition) {\n                        const isRemoveEvent = iterator <= addEventListenersPosition;\n                        processListenerChange(target, isRemoveEvent, mutations, iterator);\n                        iterator += isRemoveEvent ? REMOVE_EVENT_SUBSCRIPTION_LENGTH : ADD_EVENT_SUBSCRIPTION_LENGTH;\n                    }\n                }\n                else {\n                    console.error(`getNode(${targetIndex}) is null.`);\n                }\n            }\n            return endPosition;\n        },\n        print(mutations, startPosition) {\n            const addEventListenerCount = mutations[startPosition + 3 /* EventSubscriptionMutationIndex.AddEventListenerCount */];\n            const removeEventListenerCount = mutations[startPosition + 2 /* EventSubscriptionMutationIndex.RemoveEventListenerCount */];\n            const addEventListenersPosition = startPosition + 4 /* EventSubscriptionMutationIndex.Events */ + removeEventListenerCount * REMOVE_EVENT_SUBSCRIPTION_LENGTH;\n            const endPosition = startPosition +\n                4 /* EventSubscriptionMutationIndex.Events */ +\n                addEventListenerCount * ADD_EVENT_SUBSCRIPTION_LENGTH +\n                removeEventListenerCount * REMOVE_EVENT_SUBSCRIPTION_LENGTH;\n            const targetIndex = mutations[startPosition + 1 /* EventSubscriptionMutationIndex.Target */];\n            const target = nodeContext.getNode(targetIndex);\n            const removedEventListeners = [];\n            const addedEventListeners = [];\n            let iterator = startPosition + 4 /* EventSubscriptionMutationIndex.Events */;\n            while (iterator < endPosition) {\n                const isRemoveEvent = iterator <= addEventListenersPosition;\n                const eventList = isRemoveEvent ? addedEventListeners : removedEventListeners;\n                eventList.push({\n                    type: strings.get(mutations[iterator]),\n                    index: mutations[iterator + 1],\n                });\n                iterator += isRemoveEvent ? REMOVE_EVENT_SUBSCRIPTION_LENGTH : ADD_EVENT_SUBSCRIPTION_LENGTH;\n            }\n            return {\n                target,\n                allowedExecution,\n                removedEventListeners,\n                addedEventListeners,\n            };\n        },\n    };\n};\n//# sourceMappingURL=event-subscription.js.map","export const BoundingClientRectProcessor = (strings, nodes, workerContext, objectContext, config) => {\n    const allowedExecution = config.executorsAllowed.includes(5 /* TransferrableMutationType.GET_BOUNDING_CLIENT_RECT */);\n    return {\n        execute(mutations, startPosition, allowedMutation) {\n            if (allowedExecution && allowedMutation) {\n                const targetIndex = mutations[startPosition + 1 /* BoundClientRectMutationIndex.Target */];\n                const target = nodes.getNode(targetIndex);\n                if (target) {\n                    const boundingRect = target.getBoundingClientRect();\n                    workerContext.messageToWorker({\n                        [12 /* TransferrableKeys.type */]: 6 /* MessageType.GET_BOUNDING_CLIENT_RECT */,\n                        [13 /* TransferrableKeys.target */]: [target._index_],\n                        [38 /* TransferrableKeys.data */]: [\n                            boundingRect.top,\n                            boundingRect.right,\n                            boundingRect.bottom,\n                            boundingRect.left,\n                            boundingRect.width,\n                            boundingRect.height,\n                        ],\n                    });\n                }\n                else {\n                    console.error(`GET_BOUNDING_CLIENT_RECT: getNode(${targetIndex}) is null.`);\n                }\n            }\n            return startPosition + 2 /* BoundClientRectMutationIndex.End */;\n        },\n        print(mutations, startPosition) {\n            const targetIndex = mutations[startPosition + 1 /* BoundClientRectMutationIndex.Target */];\n            const target = nodes.getNode(targetIndex);\n            return {\n                type: 'GET_BOUNDING_CLIENT_RECT',\n                target,\n                allowedExecution,\n            };\n        },\n    };\n};\n//# sourceMappingURL=bounding-client-rect.js.map","import { applyDefaultInputListener, sendValueChangeOnAttributeMutation } from './event-subscription';\nexport const ChildListProcessor = (strings, { getNode }, workerContext, objectContext, config) => {\n    const allowedExecution = config.executorsAllowed.includes(2 /* TransferrableMutationType.CHILD_LIST */);\n    return {\n        execute(mutations, startPosition, allowedMutation) {\n            const appendNodeCount = mutations[startPosition + 4 /* ChildListMutationIndex.AppendedNodeCount */];\n            const removeNodeCount = mutations[startPosition + 5 /* ChildListMutationIndex.RemovedNodeCount */];\n            if (allowedExecution && allowedMutation) {\n                const targetIndex = mutations[startPosition + 1 /* ChildListMutationIndex.Target */];\n                const target = getNode(targetIndex);\n                if (target) {\n                    if (removeNodeCount > 0) {\n                        mutations\n                            .slice(startPosition + 6 /* ChildListMutationIndex.Nodes */ + appendNodeCount, startPosition + 6 /* ChildListMutationIndex.Nodes */ + appendNodeCount + removeNodeCount)\n                            .forEach((removeId) => {\n                            const node = getNode(removeId);\n                            if (node) {\n                                node.remove();\n                            }\n                            else {\n                                console.error(`CHILD_LIST: getNode(${removeId}) is null.`);\n                            }\n                        });\n                    }\n                    if (appendNodeCount > 0) {\n                        mutations\n                            .slice(startPosition + 6 /* ChildListMutationIndex.Nodes */, startPosition + 6 /* ChildListMutationIndex.Nodes */ + appendNodeCount)\n                            .forEach((addId) => {\n                            const nextSibling = mutations[startPosition + 2 /* ChildListMutationIndex.NextSibling */];\n                            const newNode = getNode(addId);\n                            if (newNode) {\n                                // TODO: Handle this case ---\n                                // Transferred nodes that are not stored were previously removed by the sanitizer.\n                                target.insertBefore(newNode, (nextSibling && getNode(nextSibling)) || null);\n                                applyDefaultInputListener(workerContext, newNode);\n                                sendValueChangeOnAttributeMutation(workerContext, newNode);\n                            }\n                        });\n                    }\n                }\n                else {\n                    console.error(`CHILD_LIST: getNode(${targetIndex}) is null.`);\n                }\n            }\n            return startPosition + 6 /* ChildListMutationIndex.End */ + appendNodeCount + removeNodeCount;\n        },\n        print(mutations, startPosition) {\n            const targetIndex = mutations[startPosition + 1 /* ChildListMutationIndex.Target */];\n            const target = getNode(targetIndex);\n            const appendNodeCount = mutations[startPosition + 4 /* ChildListMutationIndex.AppendedNodeCount */];\n            const removeNodeCount = mutations[startPosition + 5 /* ChildListMutationIndex.RemovedNodeCount */];\n            const removedNodes = Array.from(mutations.slice(startPosition + 6 /* ChildListMutationIndex.Nodes */ + appendNodeCount, startPosition + 6 /* ChildListMutationIndex.Nodes */ + appendNodeCount + removeNodeCount)).map((index) => getNode(index) || index);\n            const addedNodes = Array.from(mutations.slice(startPosition + 6 /* ChildListMutationIndex.Nodes */, startPosition + 6 /* ChildListMutationIndex.Nodes */ + appendNodeCount)).map((index) => getNode(index) || index);\n            return {\n                target,\n                allowedExecution,\n                nextSibling: getNode(mutations[startPosition + 2 /* ChildListMutationIndex.NextSibling */]) || null,\n                previousSibling: getNode(mutations[startPosition + 3 /* ChildListMutationIndex.PreviousSibling */]) || null,\n                addedNodes,\n                removedNodes,\n            };\n        },\n    };\n};\n//# sourceMappingURL=child-list.js.map","export const AttributeProcessor = (strings, nodes, workerContext, objectContext, config) => {\n    const allowedExecution = config.executorsAllowed.includes(0 /* TransferrableMutationType.ATTRIBUTES */);\n    /**\n     * @param mutations\n     * @param startPosition\n     */\n    const getValue = (mutations, startPosition) => {\n        const value = mutations[startPosition + 4 /* AttributeMutationIndex.Value */];\n        // Value is sent as 0 when it's the default value or removal.\n        // Value is sent as index + 1 when it's a valid value.\n        return value !== 0 ? strings.get(value - 1) : null;\n    };\n    return {\n        execute(mutations, startPosition, allowedMutation) {\n            if (allowedExecution && allowedMutation) {\n                const targetIndex = mutations[startPosition + 1 /* AttributeMutationIndex.Target */];\n                const target = nodes.getNode(targetIndex);\n                const attributeName = strings.get(mutations[startPosition + 2 /* AttributeMutationIndex.Name */]);\n                const value = getValue(mutations, startPosition);\n                if (target) {\n                    if (attributeName != null) {\n                        if (config.sanitizer) {\n                            const mutated = config.sanitizer.setAttribute(target, attributeName, value);\n                            if (!mutated) {\n                                // TODO(choumx): Inform worker that sanitizer ignored unsafe attribute value change.\n                            }\n                        }\n                        else {\n                            if (value == null) {\n                                target.removeAttribute(attributeName);\n                            }\n                            else {\n                                target.setAttribute(attributeName, value);\n                            }\n                        }\n                    }\n                }\n                else {\n                    console.error(`ATTR_LIST: getNode(${targetIndex}) is null.`);\n                }\n            }\n            return startPosition + 5 /* AttributeMutationIndex.End */;\n        },\n        print(mutations, startPosition) {\n            const targetIndex = mutations[startPosition + 1 /* AttributeMutationIndex.Target */];\n            const target = nodes.getNode(targetIndex);\n            const attributeName = strings.get(mutations[startPosition + 2 /* AttributeMutationIndex.Name */]);\n            const value = getValue(mutations, startPosition);\n            return {\n                target,\n                allowedExecution,\n                attributeName,\n                value,\n                remove: value == null,\n            };\n        },\n    };\n};\n//# sourceMappingURL=attribute.js.map","export const CharacterDataProcessor = (strings, nodes, workerContext, objectContext, config) => {\n    const allowedExecution = config.executorsAllowed.includes(1 /* TransferrableMutationType.CHARACTER_DATA */);\n    return {\n        execute(mutations, startPosition, allowedMutation) {\n            if (allowedExecution && allowedMutation) {\n                const targetIndex = mutations[startPosition + 1 /* CharacterDataMutationIndex.Target */];\n                const target = nodes.getNode(targetIndex);\n                const value = mutations[startPosition + 2 /* CharacterDataMutationIndex.Value */];\n                if (target) {\n                    if (value) {\n                        // Sanitization not necessary for textContent.\n                        target.textContent = strings.get(value);\n                    }\n                }\n                else {\n                    console.error(`CHAR_DATA: getNode(${targetIndex}) is null.`);\n                }\n            }\n            return startPosition + 3 /* CharacterDataMutationIndex.End */;\n        },\n        print(mutations, startPosition) {\n            const targetIndex = mutations[startPosition + 1 /* CharacterDataMutationIndex.Target */];\n            const target = nodes.getNode(targetIndex);\n            return {\n                target,\n                allowedExecution,\n                value: strings.get(mutations[startPosition + 2 /* CharacterDataMutationIndex.Value */]),\n            };\n        },\n    };\n};\n//# sourceMappingURL=character-data.js.map","export const PropertyProcessor = (strings, nodeContext, workerContext, objectContext, config) => {\n    const allowedExecution = config.executorsAllowed.includes(3 /* TransferrableMutationType.PROPERTIES */);\n    const getValue = (mutations, startPosition) => {\n        const value = mutations[startPosition + 4 /* PropertyMutationIndex.Value */];\n        if (mutations[startPosition + 3 /* PropertyMutationIndex.IsBoolean */] === 1 /* NumericBoolean.TRUE */) {\n            return value === 1 /* NumericBoolean.TRUE */;\n        }\n        if (value !== 0) {\n            return strings.get(value);\n        }\n        return null;\n    };\n    return {\n        execute(mutations, startPosition, allowedMutation) {\n            if (allowedExecution && allowedMutation) {\n                const targetIndex = mutations[startPosition + 1 /* PropertyMutationIndex.Target */];\n                const target = nodeContext.getNode(targetIndex);\n                const name = strings.get(mutations[startPosition + 2 /* PropertyMutationIndex.Name */]);\n                const value = getValue(mutations, startPosition);\n                if (target) {\n                    if (name && value != null) {\n                        if (config.sanitizer) {\n                            const mutated = config.sanitizer.setProperty(target, name, String(value));\n                            if (!mutated) {\n                                // TODO(choumx): Inform worker that sanitizer ignored unsafe property value change.\n                            }\n                        }\n                        else {\n                            target[name] = value;\n                        }\n                    }\n                }\n                else {\n                    console.error(`PROPERTY: getNode(${targetIndex}) is null.`);\n                }\n            }\n            return startPosition + 5 /* PropertyMutationIndex.End */;\n        },\n        print(mutations, startPosition) {\n            const targetIndex = mutations[startPosition + 1 /* PropertyMutationIndex.Target */];\n            const target = nodeContext.getNode(targetIndex);\n            const name = strings.get(mutations[startPosition + 2 /* PropertyMutationIndex.Name */]);\n            const value = getValue(mutations, startPosition);\n            return {\n                target,\n                name,\n                value,\n                allowedExecution,\n            };\n        },\n    };\n};\n//# sourceMappingURL=property.js.map","import { ReadableMutationType } from '../../transfer/TransferrableMutation';\nexport const LongTaskExecutor = (stringContext, nodeContext, workerContext, objectContext, config) => {\n    const allowedExecution = config.executorsAllowed.includes(6 /* TransferrableMutationType.LONG_TASK_START */);\n    let index = 0;\n    let currentResolver;\n    return {\n        execute(mutations, startPosition, allowedMutation) {\n            if (allowedExecution && allowedMutation && config.longTask) {\n                if (mutations[startPosition] === 6 /* TransferrableMutationType.LONG_TASK_START */) {\n                    index++;\n                    if (!currentResolver) {\n                        const newResolver = new Promise((resolve) => (currentResolver = resolve));\n                        // One of the worker-dom contracts is that there should not be two\n                        // LONG_TASK_STARTs in a row without an END in between. In case both exist within\n                        // the same set of mutations, we need to guard against having a consumers 1st END\n                        // handler occur after the START handler. If we synchronously called longTask() here it\n                        // would likely occur due to scheduling of callbacks vs. promise.\n                        // See: worker-dom/pull/989.\n                        Promise.resolve().then(() => config.longTask && config.longTask(newResolver));\n                    }\n                }\n                else if (mutations[startPosition] === 7 /* TransferrableMutationType.LONG_TASK_END */) {\n                    index--;\n                    if (currentResolver && index <= 0) {\n                        currentResolver();\n                        currentResolver = null;\n                        index = 0;\n                    }\n                }\n            }\n            return startPosition + 2 /* LongTaskMutationIndex.End */;\n        },\n        print(mutations, startPosition) {\n            return {\n                type: ReadableMutationType[mutations[startPosition]],\n                allowedExecution,\n            };\n        },\n        get active() {\n            return currentResolver !== null;\n        },\n    };\n};\n//# sourceMappingURL=long-task.js.map","const f32 = new Float32Array(1);\nconst u16 = new Uint16Array(f32.buffer);\n/**\n * Deserializes TransferrableObjectType arguments.\n * @param buffer Contains mutation with arguments to deserialize.\n * @param offset Start position of arguments in mutations buffer.\n * @param count Number of arguments to deserialize.\n * @param stringContext Strings context.\n * @param nodeContext Nodes context.\n * @param objectContext Objects context\n */\nexport function deserializeTransferrableObject(buffer, offset, count, stringContext, nodeContext, objectContext) {\n    const args = [];\n    for (let i = 0; i < count; i++) {\n        switch (buffer[offset++]) {\n            case 1 /* TransferrableObjectType.SmallInt */:\n                args.push(buffer[offset++]);\n                break;\n            case 2 /* TransferrableObjectType.Float */:\n                u16[0] = buffer[offset++];\n                u16[1] = buffer[offset++];\n                args.push(f32[0]);\n                break;\n            case 3 /* TransferrableObjectType.String */:\n                args.push(stringContext.get(buffer[offset++]));\n                break;\n            case 4 /* TransferrableObjectType.Array */:\n                const size = buffer[offset++];\n                const des = deserializeTransferrableObject(buffer, offset, size, stringContext, nodeContext, objectContext);\n                args.push(des.args);\n                offset = des.offset;\n                break;\n            case 5 /* TransferrableObjectType.TransferObject */:\n                if (!objectContext) {\n                    throw new Error('objectContext not provided.');\n                }\n                args.push(objectContext.get(buffer[offset++]));\n                break;\n            case 6 /* TransferrableObjectType.CanvasRenderingContext2D */:\n                const canvas = nodeContext.getNode(buffer[offset++]);\n                args.push(canvas.getContext('2d'));\n                break;\n            case 7 /* TransferrableObjectType.HTMLElement */:\n                args.push(nodeContext.getNode(buffer[offset++]));\n                break;\n            default:\n                throw new Error('Cannot deserialize argument.');\n        }\n    }\n    return {\n        args,\n        offset,\n    };\n}\n//# sourceMappingURL=deserializeTransferrableObject.js.map","import { deserializeTransferrableObject } from '../deserializeTransferrableObject';\nexport const ObjectMutationProcessor = (strings, nodeContext, workerContext, objectContext, config) => {\n    const allowedExecution = config.executorsAllowed.includes(9 /* TransferrableMutationType.OBJECT_MUTATION */);\n    return {\n        execute(mutations, startPosition, allowedMutation) {\n            const functionName = strings.get(mutations[startPosition + 1 /* ObjectMutationIndex.FunctionName */]);\n            const argCount = mutations[startPosition + 2 /* ObjectMutationIndex.ArgumentCount */];\n            const { offset: targetOffset, args: deserializedTarget } = deserializeTransferrableObject(mutations, startPosition + 3 /* ObjectMutationIndex.SerializedTarget */, 1, strings, nodeContext, objectContext);\n            const target = deserializedTarget[0];\n            const { offset: argsOffset, args } = deserializeTransferrableObject(mutations, targetOffset, argCount, strings, nodeContext, objectContext);\n            if (allowedExecution && allowedMutation) {\n                if (isSetter(target, functionName)) {\n                    target[functionName] = args[0];\n                }\n                else {\n                    target[functionName](...args);\n                }\n            }\n            return argsOffset;\n        },\n        print(mutations, startPosition) {\n            const functionName = strings.get(mutations[startPosition + 1 /* ObjectMutationIndex.FunctionName */]);\n            const { args: deserializedTarget } = deserializeTransferrableObject(mutations, startPosition + 3 /* ObjectMutationIndex.SerializedTarget */, 1, strings, nodeContext, objectContext);\n            const target = deserializedTarget[0];\n            return {\n                type: 'OBJECT_MUTATION',\n                target,\n                functionName,\n                isSetter: isSetter(target, functionName),\n                allowedExecution,\n            };\n        },\n    };\n};\nfunction isSetter(object, name) {\n    if (!object) {\n        throw new Error(`Property ${name} does not exist on ${object}.`);\n    }\n    const descriptor = Object.getOwnPropertyDescriptor(object, name);\n    if (descriptor !== undefined) {\n        return 'set' in descriptor;\n    }\n    return isSetter(Object.getPrototypeOf(object), name);\n}\n//# sourceMappingURL=object-mutation.js.map","import { deserializeTransferrableObject } from '../deserializeTransferrableObject';\nexport const ObjectCreationProcessor = (strings, nodeContext, workerContext, objectContext, config) => {\n    const allowedExecution = config.executorsAllowed.includes(10 /* TransferrableMutationType.OBJECT_CREATION */);\n    if (!objectContext) {\n        throw new Error('objectContext is not defined.');\n    }\n    return {\n        execute(mutations, startPosition, allowedMutation) {\n            const functionName = strings.get(mutations[startPosition + 1 /* ObjectCreationIndex.FunctionName */]);\n            const objectId = mutations[startPosition + 2 /* ObjectCreationIndex.ObjectId */];\n            const argCount = mutations[startPosition + 3 /* ObjectCreationIndex.ArgumentCount */];\n            const { offset: targetOffset, args: deserializedTarget } = deserializeTransferrableObject(mutations, startPosition + 4 /* ObjectCreationIndex.SerializedTarget */, 1, // argCount\n            strings, nodeContext, objectContext);\n            const target = deserializedTarget[0];\n            const { offset: argsOffset, args } = deserializeTransferrableObject(mutations, targetOffset, argCount, strings, nodeContext, objectContext);\n            if (allowedExecution && allowedMutation) {\n                if (functionName === 'new') {\n                    // deal with constructor case here\n                }\n                else {\n                    objectContext.store(objectId, target[functionName](...args));\n                }\n            }\n            return argsOffset;\n        },\n        print(mutations, startPosition) {\n            const functionName = strings.get(mutations[startPosition + 1 /* ObjectCreationIndex.FunctionName */]);\n            const objectId = mutations[startPosition + 2 /* ObjectCreationIndex.ObjectId */];\n            const argCount = mutations[startPosition + 3 /* ObjectCreationIndex.ArgumentCount */];\n            const { args: deserializedTarget } = deserializeTransferrableObject(mutations, startPosition + 4 /* ObjectCreationIndex.SerializedTarget */, 1, // argCount\n            strings, nodeContext, objectContext);\n            const target = deserializedTarget[0];\n            return {\n                type: 'OBJECT_CREATION',\n                target,\n                functionName,\n                objectId,\n                argCount,\n                allowedExecution,\n            };\n        },\n    };\n};\n//# sourceMappingURL=object-creation.js.map","export const ImageBitmapProcessor = (strings, nodeContext, workerContext, objectContext, config) => {\n    const allowedExecution = config.executorsAllowed.includes(11 /* TransferrableMutationType.IMAGE_BITMAP_INSTANCE */);\n    return {\n        execute(mutations, startPosition, allowedMutation) {\n            if (allowedExecution && allowedMutation) {\n                const targetIndex = mutations[startPosition + 1 /* ImageBitmapMutationIndex.Target */];\n                const target = nodeContext.getNode(targetIndex);\n                if (target) {\n                    self.createImageBitmap(target).then((imageBitmap) => {\n                        workerContext.messageToWorker({\n                            [12 /* TransferrableKeys.type */]: 10 /* MessageType.IMAGE_BITMAP_INSTANCE */,\n                            [73 /* TransferrableKeys.callIndex */]: mutations[startPosition + 2 /* ImageBitmapMutationIndex.CallIndex */],\n                            [38 /* TransferrableKeys.data */]: imageBitmap,\n                        }, [imageBitmap]);\n                    });\n                }\n                else {\n                    console.error(`IMAGE_BITMAP_INSTANCE: getNode(${targetIndex}) is null.`);\n                }\n            }\n            return startPosition + 3 /* ImageBitmapMutationIndex.End */;\n        },\n        print(mutations, startPosition) {\n            const targetIndex = mutations[startPosition + 1 /* ImageBitmapMutationIndex.Target */];\n            const target = nodeContext.getNode(targetIndex);\n            return {\n                type: 'IMAGE_BITMAP_INSTANCE',\n                target,\n                allowedExecution,\n                callIndex: mutations[startPosition + 2 /* ImageBitmapMutationIndex.CallIndex */],\n            };\n        },\n    };\n};\n//# sourceMappingURL=image-bitmap.js.map","export const StorageProcessor = (strings, nodeContext, workerContext, objectContext, config) => {\n    const allowedExecution = config.executorsAllowed.includes(12 /* TransferrableMutationType.STORAGE */);\n    const get = (location, key) => {\n        if (config.sanitizer && location === 2 /* StorageLocation.AmpState */) {\n            config.sanitizer.getStorage(location, key).then((value) => {\n                const message = {\n                    [12 /* TransferrableKeys.type */]: 11 /* MessageType.GET_STORAGE */,\n                    [74 /* TransferrableKeys.storageKey */]: key,\n                    [75 /* TransferrableKeys.storageLocation */]: location,\n                    [21 /* TransferrableKeys.value */]: value,\n                };\n                workerContext.messageToWorker(message);\n            });\n        }\n        else {\n            console.error(`STORAGE: Sanitizer not found or unsupported location:`, location);\n        }\n    };\n    const set = (location, key, value) => {\n        if (config.sanitizer) {\n            // TODO: Message worker so AMP.setState() can be Promise-able.\n            config.sanitizer.setStorage(location, key, value);\n        }\n        else {\n            let storage;\n            if (location === 0 /* StorageLocation.Local */) {\n                storage = window.localStorage;\n            }\n            else if (location === 1 /* StorageLocation.Session */) {\n                storage = window.sessionStorage;\n            }\n            if (storage) {\n                if (key == null) {\n                    if (value == null) {\n                        storage.clear();\n                    }\n                    else {\n                        throw new Error('Unexpected storage operation.');\n                    }\n                }\n                else {\n                    if (value == null) {\n                        storage.removeItem(key);\n                    }\n                    else {\n                        storage.setItem(key, value);\n                    }\n                }\n            }\n            else {\n                console.error(`STORAGE: Unexpected location: \"${location}\".`);\n            }\n        }\n    };\n    return {\n        execute(mutations, startPosition, allowedMutation) {\n            if (allowedExecution && allowedMutation) {\n                const operation = mutations[startPosition + 1 /* StorageMutationIndex.Operation */];\n                const location = mutations[startPosition + 2 /* StorageMutationIndex.Location */];\n                const keyIndex = mutations[startPosition + 3 /* StorageMutationIndex.Key */];\n                const valueIndex = mutations[startPosition + 4 /* StorageMutationIndex.Value */];\n                // TODO(choumx): Clean up key/value strings (or don't store them in the first place)\n                // to avoid leaking memory.\n                const key = keyIndex > 0 ? strings.get(keyIndex - 1) : '';\n                const value = valueIndex > 0 ? strings.get(valueIndex - 1) : null;\n                if (operation === 1 /* GetOrSet.GET */) {\n                    get(location, key);\n                }\n                else if (operation === 2 /* GetOrSet.SET */) {\n                    set(location, key, value);\n                }\n            }\n            return startPosition + 5 /* StorageMutationIndex.End */;\n        },\n        print(mutations, startPosition) {\n            const operation = mutations[startPosition + 1 /* StorageMutationIndex.Operation */];\n            const location = mutations[startPosition + 2 /* StorageMutationIndex.Location */];\n            const keyIndex = mutations[startPosition + 3 /* StorageMutationIndex.Key */];\n            const valueIndex = mutations[startPosition + 4 /* StorageMutationIndex.Value */];\n            const key = keyIndex > 0 ? strings.get(keyIndex - 1) : null;\n            const value = valueIndex > 0 ? strings.get(valueIndex - 1) : null;\n            return {\n                type: 'STORAGE',\n                operation,\n                location,\n                key,\n                value,\n                allowedExecution,\n            };\n        },\n    };\n};\n//# sourceMappingURL=storage.js.map","let fnCallCount = 0;\n/**\n * A mapping between each request to callFunction and its Promise.\n */\nconst promiseMap = {};\n/**\n * Each invocation of `ExportedWorker.prototype.callFunction` needs to be registered with a unique index\n * and promise. The index is given to the underlying Worker and returned by it as well. That enables the main-thread to\n * correlate postMessage responses with their original requests and resolve/reject the correct Promise.\n */\nexport function registerPromise() {\n    // TS won't realize that the constructor promise assigns the handlers, so we `any` them.\n    let resolve;\n    let reject;\n    const promise = new Promise((res, rej) => {\n        resolve = res;\n        reject = rej;\n    });\n    // Wraparound to 0 in case someone attempts to register over 9 quadrillion promises.\n    if (fnCallCount >= Number.MAX_VALUE) {\n        fnCallCount = 0;\n    }\n    const index = fnCallCount++;\n    promiseMap[index] = { promise, resolve, reject };\n    return { promise, index };\n}\nexport const FunctionProcessor = (strings, nodeContext, workerContext, objectContext, config) => {\n    const allowedExecution = config.executorsAllowed.includes(13 /* TransferrableMutationType.FUNCTION_CALL */);\n    return {\n        execute(mutations, startPosition) {\n            if (allowedExecution) {\n                const status = mutations[startPosition + 1 /* FunctionMutationIndex.Status */];\n                const index = mutations[startPosition + 2 /* FunctionMutationIndex.Index */];\n                const value = mutations[startPosition + 3 /* FunctionMutationIndex.Value */];\n                const parsed = strings.hasIndex(value) ? JSON.parse(strings.get(value)) : undefined;\n                if (status === 1 /* ResolveOrReject.RESOLVE */) {\n                    promiseMap[index].resolve(parsed);\n                }\n                else {\n                    promiseMap[index].reject(parsed);\n                }\n                delete promiseMap[index];\n            }\n            return startPosition + 4 /* FunctionMutationIndex.End */;\n        },\n        print(mutations, startPosition) {\n            const status = mutations[startPosition + 1 /* FunctionMutationIndex.Status */];\n            const index = mutations[startPosition + 2 /* FunctionMutationIndex.Index */];\n            const value = mutations[startPosition + 3 /* FunctionMutationIndex.Value */];\n            return {\n                type: 'FUNCTION_INVOCATION',\n                status,\n                index,\n                value: strings.get(value),\n                allowedExecution,\n            };\n        },\n    };\n};\n//# sourceMappingURL=function.js.map","export const ScrollIntoViewProcessor = (strings, nodes, workerContext, objectContext, config) => {\n    const allowedExecution = config.executorsAllowed.includes(14 /* TransferrableMutationType.SCROLL_INTO_VIEW */);\n    return {\n        execute(mutations, startPosition, allowedMutation) {\n            if (allowedExecution && allowedMutation) {\n                const targetIndex = mutations[startPosition + 1 /* ScrollIntoViewMutationIndex.Target */];\n                const target = nodes.getNode(targetIndex);\n                if (target) {\n                    target.scrollIntoView();\n                }\n                else {\n                    console.error(`SCROLL_INTO_VIEW: getNode(${targetIndex}) is null.`);\n                }\n            }\n            return startPosition + 2 /* ScrollIntoViewMutationIndex.End */;\n        },\n        print(mutations, startPosition) {\n            const targetIndex = mutations[startPosition + 1 /* ScrollIntoViewMutationIndex.Target */];\n            const target = nodes.getNode(targetIndex);\n            return {\n                type: 'SCROLL_INTO_VIEW',\n                target,\n                allowedExecution,\n            };\n        },\n    };\n};\n//# sourceMappingURL=scroll-into-view.js.map","import { OffscreenCanvasProcessor } from './commands/offscreen-canvas';\nimport { ReadableMutationType, isUserVisibleMutation } from '../transfer/TransferrableMutation';\nimport { EventSubscriptionProcessor } from './commands/event-subscription';\nimport { BoundingClientRectProcessor } from './commands/bounding-client-rect';\nimport { ChildListProcessor } from './commands/child-list';\nimport { AttributeProcessor } from './commands/attribute';\nimport { CharacterDataProcessor } from './commands/character-data';\nimport { PropertyProcessor } from './commands/property';\nimport { LongTaskExecutor } from './commands/long-task';\nimport { ObjectMutationProcessor } from './commands/object-mutation';\nimport { ObjectCreationProcessor } from './commands/object-creation';\nimport { ImageBitmapProcessor } from './commands/image-bitmap';\nimport { StorageProcessor } from './commands/storage';\nimport { FunctionProcessor } from './commands/function';\nimport { ScrollIntoViewProcessor } from './commands/scroll-into-view';\nexport class MutatorProcessor {\n    stringContext;\n    nodeContext;\n    mutationQueue = [];\n    pendingMutations = false;\n    mutationPumpFunction;\n    sanitizer;\n    executors;\n    /**\n     * @param stringContext\n     * @param nodeContext\n     * @param workerContext\n     * @param sanitizer Sanitizer to apply to content if needed.\n     */\n    constructor(stringContext, nodeContext, workerContext, config, objectContext) {\n        this.stringContext = stringContext;\n        this.nodeContext = nodeContext;\n        this.sanitizer = config.sanitizer;\n        this.mutationPumpFunction = config.mutationPump;\n        const args = [\n            stringContext,\n            nodeContext,\n            workerContext,\n            objectContext,\n            config,\n        ];\n        const sharedLongTaskProcessor = LongTaskExecutor.apply(null, args);\n        this.executors = {\n            [2 /* TransferrableMutationType.CHILD_LIST */]: ChildListProcessor.apply(null, args),\n            [0 /* TransferrableMutationType.ATTRIBUTES */]: AttributeProcessor.apply(null, args),\n            [1 /* TransferrableMutationType.CHARACTER_DATA */]: CharacterDataProcessor.apply(null, args),\n            [3 /* TransferrableMutationType.PROPERTIES */]: PropertyProcessor.apply(null, args),\n            [4 /* TransferrableMutationType.EVENT_SUBSCRIPTION */]: EventSubscriptionProcessor.apply(null, args),\n            [5 /* TransferrableMutationType.GET_BOUNDING_CLIENT_RECT */]: BoundingClientRectProcessor.apply(null, args),\n            [6 /* TransferrableMutationType.LONG_TASK_START */]: sharedLongTaskProcessor,\n            [7 /* TransferrableMutationType.LONG_TASK_END */]: sharedLongTaskProcessor,\n            [8 /* TransferrableMutationType.OFFSCREEN_CANVAS_INSTANCE */]: OffscreenCanvasProcessor.apply(null, args),\n            [9 /* TransferrableMutationType.OBJECT_MUTATION */]: ObjectMutationProcessor.apply(null, args),\n            [10 /* TransferrableMutationType.OBJECT_CREATION */]: ObjectCreationProcessor.apply(null, args),\n            [11 /* TransferrableMutationType.IMAGE_BITMAP_INSTANCE */]: ImageBitmapProcessor.apply(null, args),\n            [12 /* TransferrableMutationType.STORAGE */]: StorageProcessor.apply(null, args),\n            [13 /* TransferrableMutationType.FUNCTION_CALL */]: FunctionProcessor.apply(null, args),\n            [14 /* TransferrableMutationType.SCROLL_INTO_VIEW */]: ScrollIntoViewProcessor.apply(null, args),\n        };\n    }\n    /**\n     * Process MutationRecords from worker thread applying changes to the existing DOM.\n     * @param phase Current Phase Worker Thread exists in.\n     * @param nodes New nodes to add in the main thread with the incoming mutations.\n     * @param stringValues Additional string values to use in decoding messages.\n     * @param mutations Changes to apply in both graph shape and content of Elements.\n     */\n    mutate(phase, nodes, stringValues, mutations) {\n        this.stringContext.storeValues(stringValues);\n        this.nodeContext.createNodes(nodes, this.sanitizer);\n        this.mutationQueue = this.mutationQueue.concat(mutations);\n        if (!this.pendingMutations) {\n            this.pendingMutations = true;\n            this.mutationPumpFunction(this.syncFlush, phase);\n        }\n    }\n    /**\n     * Apply all stored mutations syncronously. This method works well, but can cause jank if there are too many\n     * mutations to apply in a single frame.\n     *\n     * Investigations in using asyncFlush to resolve are worth considering.\n     *\n     * @param allowVisibleMutations\n     * @return Array of mutation types that were disallowed.\n     */\n    syncFlush = (allowVisibleMutations = true) => {\n        if (WORKER_DOM_DEBUG) {\n            console.group('Mutations');\n        }\n        const disallowedMutations = [];\n        this.mutationQueue.forEach((mutationArray) => {\n            const length = mutationArray.length;\n            let operationStart = 0;\n            while (operationStart < length) {\n                // TransferrableMutationType is always at position 0.\n                const mutationType = mutationArray[operationStart];\n                // TODO(worker-dom): Hoist `allow` up to entry point (index.amp.ts) to avoid bundling `isUserVisibleMutation`.\n                const allow = allowVisibleMutations || !isUserVisibleMutation(mutationType);\n                if (!allow) {\n                    // TODO(worker-dom): Consider returning the strings from executor.print() for better error messaging.\n                    disallowedMutations.push(mutationType);\n                }\n                const executor = this.executors[mutationType];\n                if (WORKER_DOM_DEBUG) {\n                    console.log(allow ? '' : '[disallowed]', ReadableMutationType[mutationType], executor.print(mutationArray, operationStart));\n                }\n                operationStart = executor.execute(mutationArray, operationStart, allow);\n            }\n        });\n        if (WORKER_DOM_DEBUG) {\n            console.groupEnd();\n        }\n        this.mutationQueue = [];\n        this.pendingMutations = false;\n        return disallowedMutations;\n    };\n}\n//# sourceMappingURL=mutator.js.map","/**\n * Stores indexed strings that are used in postMessage() calls from the worker.\n */\nexport class StringContext {\n    strings;\n    constructor() {\n        this.strings = [];\n    }\n    /**\n     * Return a string for the specified index.\n     * @param index string index to retrieve.\n     * @return string in map for the index.\n     */\n    get(index) {\n        return this.strings[index] || '';\n    }\n    hasIndex(index) {\n        return this.strings[index] !== undefined;\n    }\n    /**\n     * Stores a string in mapping and returns the index of the location.\n     * @param value string to store\n     * @return {number}\n     */\n    store(value) {\n        this.strings.push(value);\n        return this.strings.length - 1;\n    }\n    /**\n     * Stores a set of strings.\n     * @param values\n     */\n    storeValues(values) {\n        values.forEach((v) => this.store(v));\n    }\n}\n//# sourceMappingURL=strings.js.map","import { applyDefaultInputListener, sendValueChangeOnAttributeMutation } from './commands/event-subscription';\nconst NODES_ALLOWED_TO_TRANSMIT_TEXT_CONTENT = [8 /* NodeType.COMMENT_NODE */, 3 /* NodeType.TEXT_NODE */];\n/**\n * Serializes a DOM element for transport to the worker.\n * @param element\n * @param minimizeString Function for minimizing strings for optimized ferrying across postMessage.\n */\nfunction createHydrateableNode(element, minimizeString, hydrateFilter, workerContext) {\n    const filteredChildNodes = [].slice.call(element.childNodes).filter(hydrateFilter);\n    const hydrated = {\n        [7 /* TransferrableKeys.index */]: element._index_,\n        [11 /* TransferrableKeys.transferred */]: 0 /* NumericBoolean.FALSE */,\n        [0 /* TransferrableKeys.nodeType */]: element.nodeType,\n        [1 /* TransferrableKeys.localOrNodeName */]: minimizeString(element.localName || element.nodeName),\n        [4 /* TransferrableKeys.childNodes */]: filteredChildNodes.map((child) => createHydrateableNode(child, minimizeString, hydrateFilter, workerContext)),\n        [2 /* TransferrableKeys.attributes */]: [].map.call(element.attributes || [], (attribute) => [\n            minimizeString(attribute.namespaceURI || 'null'),\n            minimizeString(attribute.name),\n            minimizeString(attribute.value),\n        ]),\n    };\n    if (element.namespaceURI != null) {\n        hydrated[6 /* TransferrableKeys.namespaceURI */] = minimizeString(element.namespaceURI);\n    }\n    if (NODES_ALLOWED_TO_TRANSMIT_TEXT_CONTENT.includes(element.nodeType) && element.textContent !== null) {\n        hydrated[5 /* TransferrableKeys.textContent */] = minimizeString(element.textContent);\n    }\n    applyDefaultInputListener(workerContext, element);\n    sendValueChangeOnAttributeMutation(workerContext, element);\n    return hydrated;\n}\n/**\n * @param element\n */\nexport function createHydrateableRootNode(element, config, workerContext) {\n    const hydrateFilter = config.hydrateFilter || (() => true);\n    const strings = [];\n    const stringMap = new Map();\n    const storeString = (value) => {\n        if (stringMap.has(value)) {\n            // Safe to cast since we verified the mapping contains the value.\n            return stringMap.get(value);\n        }\n        const count = strings.length;\n        stringMap.set(value, count);\n        strings.push(value);\n        return count;\n    };\n    const skeleton = createHydrateableNode(element, storeString, hydrateFilter, workerContext);\n    return { skeleton, strings };\n}\n/**\n * @param element\n */\nexport function createReadableHydrateableRootNode(element, config, workerContext) {\n    // \"Readable\" variant doesn't do any string minimization so we can output it for debugging purposes.\n    // Note that this intentionally breaks the type contract of createHydrateableNode() and HydrateableNode.\n    return createHydrateableNode(element, ((value) => value), config.hydrateFilter || (() => true), workerContext);\n}\n//# sourceMappingURL=serialize.js.map","/**\n * @fileoverview Converts index-based worker messages to human-readable objects.\n *\n * Requires manual upkeep to keep consistency with messages and enums.\n * This allows us to continue using 'const enum' for enum inlining.\n * @see https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md#9.4\n */\nimport { createReadableHydrateableRootNode } from './serialize';\n/**\n * @param element\n */\nexport const readableHydrateableRootNode = (element, config, workerContext) => readableHydrateableNode(createReadableHydrateableRootNode(element, config, workerContext));\n/**\n * @param nodeContext {NodeContext}\n * @param node {TransferredNode}\n */\nexport const readableTransferredNode = (nodeContext, node) => (node != null && nodeContext.getNode(node[0 /* TransferrableNodeIndex.Index */])) || node;\n/**\n * @param node\n */\nfunction readableHydrateableNode(node) {\n    const out = {\n        nodeType: node[0 /* TransferrableKeys.nodeType */],\n        name: node[1 /* TransferrableKeys.localOrNodeName */],\n        attributes: null,\n        childNodes: null,\n    };\n    const attributes = node[2 /* TransferrableKeys.attributes */];\n    if (attributes) {\n        out.attributes = attributes.map((attr) => ({\n            name: attr[1],\n            value: attr[2],\n        }));\n    }\n    const childNodes = node[4 /* TransferrableKeys.childNodes */];\n    if (childNodes) {\n        out.childNodes = childNodes.map(readableHydrateableNode);\n    }\n    return out;\n}\n/**\n * @param message {MessageToWorker}\n */\nconst isEvent = (message) => message[12 /* TransferrableKeys.type */] == 1 /* MessageType.EVENT */;\nconst isValueSync = (message) => message[12 /* TransferrableKeys.type */] == 4 /* MessageType.SYNC */;\nconst isBoundingClientRect = (message) => message[12 /* TransferrableKeys.type */] === 6 /* MessageType.GET_BOUNDING_CLIENT_RECT */;\nconst isGetStorage = (message) => message[12 /* TransferrableKeys.type */] === 11 /* MessageType.GET_STORAGE */;\n/**\n * @param nodeContext {NodeContext}\n * @param event {TransferrableEvent}\n */\nfunction readableTransferrableEvent(nodeContext, event) {\n    const value = (item) => {\n        if (typeof item === 'number' || typeof item === 'boolean') {\n            return item !== undefined ? item : null;\n        }\n        return item !== undefined && item !== null ? readableTransferredNode(nodeContext, item) : null;\n    };\n    return {\n        type: event[12 /* TransferrableKeys.type */],\n        bubbles: value(event[25 /* TransferrableKeys.bubbles */]),\n        cancelable: value(event[26 /* TransferrableKeys.cancelable */]),\n        cancelBubble: value(event[27 /* TransferrableKeys.cancelBubble */]),\n        defaultPrevented: value(event[29 /* TransferrableKeys.defaultPrevented */]),\n        eventPhase: value(event[30 /* TransferrableKeys.eventPhase */]),\n        isTrusted: value(event[31 /* TransferrableKeys.isTrusted */]),\n        returnValue: value(event[32 /* TransferrableKeys.returnValue */]),\n        currentTarget: value(event[28 /* TransferrableKeys.currentTarget */]),\n        target: value(event[13 /* TransferrableKeys.target */]),\n        scoped: value(event[34 /* TransferrableKeys.scoped */]),\n        keyCode: value(event[35 /* TransferrableKeys.keyCode */]),\n    };\n}\n/**\n * @param nodeContext {NodeContext}\n * @param value {TransferrableSyncValue}\n */\nfunction readableTransferrableSyncValue(nodeContext, value) {\n    const index = value[7 /* TransferrableKeys.index */];\n    return {\n        target: nodeContext.getNode(index) || index,\n        value: value[21 /* TransferrableKeys.value */],\n    };\n}\n/**\n * @param message\n */\nexport function readableMessageToWorker(nodeContext, message) {\n    if (isEvent(message)) {\n        const event = message[39 /* TransferrableKeys.event */];\n        return {\n            type: 'EVENT',\n            event: readableTransferrableEvent(nodeContext, event),\n        };\n    }\n    else if (isValueSync(message)) {\n        const sync = message[40 /* TransferrableKeys.sync */];\n        return {\n            type: 'SYNC',\n            sync: readableTransferrableSyncValue(nodeContext, sync),\n        };\n    }\n    else if (isBoundingClientRect(message)) {\n        return {\n            type: 'GET_BOUNDING_CLIENT_RECT',\n            target: readableTransferredNode(nodeContext, message[13 /* TransferrableKeys.target */]),\n        };\n    }\n    else if (isGetStorage(message)) {\n        return {\n            type: 'GET_STORAGE',\n            key: message[74 /* TransferrableKeys.storageKey */],\n            location: message[75 /* TransferrableKeys.storageLocation */],\n            value: message[21 /* TransferrableKeys.value */],\n        };\n    }\n    else {\n        return 'Unrecognized MessageToWorker type: ' + message[12 /* TransferrableKeys.type */];\n    }\n}\n//# sourceMappingURL=debugging.js.map","/**\n * An almost drop-in replacement for a standard Web Worker, although this one\n * within a sandboxed cross-origin iframe for a heightened security boundary.\n * For more details on Worker, see: https://developer.mozilla.org/en-US/docs/Web/API/Worker\n *\n * The iframe used for sandboxing must follow a specific contract. It:\n *   1. Must send a ready message to the main-thread.\n *   2. Must listen for a message from main-thread with the code to initialize a Worker with.\n *   3. Must send \"worker-ready\" once worker is initialized.\n *   4. Must proxy all messages between the Worker and Parent, including errors.\n */\nclass IframeWorker {\n    url;\n    // Public Worker API\n    onerror;\n    onmessage;\n    onmessageerror;\n    readyPromise;\n    // Internal variables.\n    iframe;\n    readyPromiseResolve;\n    /**\n     * @param url The URL to initiate the worker from.\n     * @param iframeUrl The URL of the iframe to use as the worker proxy.\n     */\n    constructor(url, iframeUrl) {\n        this.url = url;\n        this.iframe = window.document.createElement('iframe');\n        this.iframe.setAttribute('sandbox', 'allow-scripts');\n        this.iframe.setAttribute('style', 'display:none');\n        this.iframe.setAttribute('src', iframeUrl);\n        this.url = url;\n        this.readyPromise = new Promise((resolve) => {\n            this.readyPromiseResolve = resolve;\n        });\n        this.setupInit();\n        this.proxyFromWorker();\n        window.document.body.appendChild(this.iframe);\n    }\n    setupInit() {\n        const listener = (event) => {\n            if (event.source != this.iframe.contentWindow) {\n                return;\n            }\n            fetch(this.url.toString())\n                .then((res) => res.text())\n                .then((code) => {\n                const data = event.data;\n                if (data.type == 'iframe-ready') {\n                    const msg = { type: 'init-worker', code };\n                    this.iframe.contentWindow.postMessage(msg, '*');\n                }\n                else if (data.type === 'worker-ready') {\n                    this.readyPromiseResolve();\n                    window.removeEventListener('message', listener);\n                }\n            });\n        };\n        window.addEventListener('message', listener);\n    }\n    proxyFromWorker() {\n        window.addEventListener('message', (event) => {\n            if (event.source != this.iframe.contentWindow) {\n                return;\n            }\n            const { type, message } = event.data;\n            if (type == 'onmessage' && this.onmessage) {\n                this.onmessage({ ...event, data: message });\n            }\n            else if (type === 'onerror' && this.onerror) {\n                this.onerror(message);\n            }\n            else if (type === 'onmessageerror' && this.onmessageerror) {\n                this.onmessageerror({ ...event, data: message });\n            }\n        });\n    }\n    /**\n     * See https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage\n     * @param message\n     * @param transferables\n     */\n    postMessage(message, transferables) {\n        const msg = { type: 'postMessage', message };\n        this.readyPromise.then(() => {\n            this.iframe.contentWindow.postMessage(msg, '*', transferables);\n        });\n    }\n    /**\n     * See https://developer.mozilla.org/en-US/docs/Web/API/Worker/terminate\n     */\n    terminate() {\n        const msg = { type: 'terminate' };\n        this.iframe.contentWindow.postMessage(msg, '*');\n        this.iframe.remove();\n    }\n}\nexport { IframeWorker };\n//# sourceMappingURL=iframe-worker.js.map","import { createHydrateableRootNode } from './serialize';\nimport { readableHydrateableRootNode, readableMessageToWorker } from './debugging';\nimport { IframeWorker } from './iframe-worker';\nexport class WorkerContext {\n    [55 /* TransferrableKeys.worker */];\n    nodeContext;\n    config;\n    /**\n     * @param baseElement\n     * @param nodeContext\n     * @param workerDOMScript\n     * @param authorScript\n     * @param config\n     */\n    constructor(baseElement, nodeContext, workerDOMScript, authorScript, config) {\n        this.nodeContext = nodeContext;\n        this.config = config;\n        const { skeleton, strings } = createHydrateableRootNode(baseElement, config, this);\n        const cssKeys = [];\n        const globalEventHandlerKeys = [];\n        // TODO(choumx): Sync read of all localStorage and sessionStorage a possible performance bottleneck?\n        const localStorageInit = getStorageInit('localStorage');\n        const sessionStorageInit = getStorageInit('sessionStorage');\n        for (const key in baseElement.style) {\n            cssKeys.push(key);\n        }\n        for (const key in baseElement) {\n            if (key.startsWith('on')) {\n                globalEventHandlerKeys.push(key);\n            }\n        }\n        // We skip assigning the globals for localStorage and sessionStorage because\n        // We've already installed them. Also, accessing them can throw in incognito mode.\n        const code = `\r\n      'use strict';\r\n      (function(){\r\n        ${workerDOMScript}\r\n        self['window'] = self;\r\n        var workerDOM = WorkerThread.workerDOM;\r\n        WorkerThread.hydrate(\r\n          workerDOM.document,\r\n          ${JSON.stringify(strings)},\r\n          ${JSON.stringify(skeleton)},\r\n          ${JSON.stringify(cssKeys)},\r\n          ${JSON.stringify(globalEventHandlerKeys)},\r\n          [${window.innerWidth}, ${window.innerHeight}],\r\n          ${JSON.stringify(localStorageInit)},\r\n          ${JSON.stringify(sessionStorageInit)}\r\n        );\r\n        workerDOM.document[${59 /* TransferrableKeys.observe */}](this);\r\n        Object.assign(self, workerDOM);\r\n      }).call(self);\r\n      ${authorScript}\r\n      //# sourceURL=${encodeURI(config.authorURL)}`;\n        if (!config.sandbox) {\n            this[55 /* TransferrableKeys.worker */] = new Worker(URL.createObjectURL(new Blob([code])));\n        }\n        else if (IS_AMP) {\n            this[55 /* TransferrableKeys.worker */] = new IframeWorker(URL.createObjectURL(new Blob([code])), config.sandbox.iframeUrl);\n        }\n        if (WORKER_DOM_DEBUG) {\n            console.info('debug', 'hydratedNode', readableHydrateableRootNode(baseElement, config, this));\n        }\n        if (config.onCreateWorker) {\n            config.onCreateWorker(baseElement, strings, skeleton, cssKeys);\n        }\n    }\n    /**\n     * Returns a Promise that resolves when the Worker is ready to receive messages.\n     * @returns {Promise<void>}\n     */\n    ready() {\n        return this.worker.readyPromise || Promise.resolve();\n    }\n    /**\n     * Returns the private worker.\n     */\n    get worker() {\n        return this[55 /* TransferrableKeys.worker */];\n    }\n    /**\n     * @param message\n     */\n    messageToWorker(message, transferables) {\n        if (WORKER_DOM_DEBUG) {\n            console.info('debug', 'messageToWorker', readableMessageToWorker(this.nodeContext, message));\n        }\n        if (this.config.onSendMessage) {\n            this.config.onSendMessage(message);\n        }\n        this.worker.postMessage(message, transferables || []);\n    }\n}\nfunction getStorageInit(type, sanitizer) {\n    try {\n        if (!sanitizer) {\n            return { storage: window[type], errorMsg: null };\n        }\n        return {\n            storage: sanitizer.getStorage(type == 'localStorage' ? 0 /* StorageLocation.Local */ : 1 /* StorageLocation.Session */),\n            errorMsg: null,\n        };\n    }\n    catch (err) {\n        return { errorMsg: err.message, storage: null };\n    }\n}\n//# sourceMappingURL=worker.js.map","/**\n * Stores objects that have their behavior handled from the main-thread. Each object is associated to a unique ID.\n */\nexport class ObjectContext {\n    objects;\n    constructor() {\n        this.objects = new Map();\n    }\n    store(id, obj) {\n        this.objects.set(id, obj);\n    }\n    get(id) {\n        const obj = this.objects.get(id);\n        if (obj) {\n            return obj;\n        }\n        else {\n            throw new Error('Object with id (' + id + ') does not exist.');\n        }\n    }\n}\n//# sourceMappingURL=object-context.js.map","import { registerPromise } from './commands/function';\n/**\n * An ExportedWorker is returned by the upgradeElement API.\n * For the most part, it delegates to the underlying Worker.\n *\n * It notably removes `postMessage` support and adds `callFunction`.\n */\nexport class ExportedWorker {\n    workerContext_;\n    config;\n    constructor(workerContext, config) {\n        this.workerContext_ = workerContext;\n        this.config = config;\n    }\n    /**\n     * Calls a function in the worker and returns a promise with the result.\n     * @param functionIdentifer\n     * @param functionArguments\n     */\n    callFunction(functionIdentifer, ...functionArguments) {\n        if (!this.config.executorsAllowed.includes(13 /* TransferrableMutationType.FUNCTION_CALL */)) {\n            throw new Error(`[worker-dom]: Error calling ${functionIdentifer}. You must enable the FUNCTION_CALL executor within the config.`);\n        }\n        const { promise, index } = registerPromise();\n        const msg = {\n            [12 /* TransferrableKeys.type */]: 12 /* MessageType.FUNCTION */,\n            [77 /* TransferrableKeys.functionIdentifier */]: functionIdentifer,\n            [78 /* TransferrableKeys.functionArguments */]: JSON.stringify(functionArguments),\n            [7 /* TransferrableKeys.index */]: index,\n        };\n        this.workerContext_.messageToWorker(msg);\n        return promise;\n    }\n    set onerror(handler) {\n        this.workerContext_.worker.onerror = handler;\n    }\n    terminate() {\n        this.workerContext_.worker.terminate();\n    }\n}\n//# sourceMappingURL=exported-worker.js.map","import { MutatorProcessor } from './mutator';\nimport { NodeContext } from './nodes';\nimport { StringContext } from './strings';\nimport { normalizeConfiguration } from './configuration';\nimport { WorkerContext } from './worker';\nimport { ObjectContext } from './object-context';\nimport { ExportedWorker } from './exported-worker';\nconst ALLOWABLE_MESSAGE_TYPES = [3 /* MessageType.MUTATE */, 2 /* MessageType.HYDRATE */];\n/**\n * @param baseElement\n * @param authorScriptURL\n * @param workerDOMURL\n * @param callbacks\n * @param sanitizer\n * @param debug\n */\nexport function fetchAndInstall(baseElement, config) {\n    const fetchPromise = Promise.all([\n        // TODO(KB): Fetch Polyfill for IE11.\n        fetch(config.domURL).then((response) => response.text()),\n        fetch(config.authorURL).then((response) => response.text()),\n    ]);\n    return install(fetchPromise, baseElement, config);\n}\n/**\n * @param fetchPromise\n * @param baseElement\n * @param config\n */\nexport function install(fetchPromise, baseElement, config) {\n    const mode = baseElement.dataset['shadowDom'];\n    if (mode === 'open' || mode === 'closed') {\n        const shadowRoot = baseElement.attachShadow({ mode });\n        const clonedElement = baseElement.cloneNode(true);\n        shadowRoot.appendChild(clonedElement);\n        baseElement = clonedElement;\n    }\n    const stringContext = new StringContext();\n    const objectContext = new ObjectContext();\n    const nodeContext = new NodeContext(stringContext, baseElement);\n    const normalizedConfig = normalizeConfiguration(config);\n    return fetchPromise.then(([domScriptContent, authorScriptContent]) => {\n        if (domScriptContent && authorScriptContent && config.authorURL) {\n            const workerContext = new WorkerContext(baseElement, nodeContext, domScriptContent, authorScriptContent, normalizedConfig);\n            const mutatorContext = new MutatorProcessor(stringContext, nodeContext, workerContext, normalizedConfig, objectContext);\n            workerContext.worker.onmessage = (message) => {\n                const { data } = message;\n                if (!ALLOWABLE_MESSAGE_TYPES.includes(data[12 /* TransferrableKeys.type */])) {\n                    return;\n                }\n                mutatorContext.mutate(data[54 /* TransferrableKeys.phase */], data[37 /* TransferrableKeys.nodes */], data[41 /* TransferrableKeys.strings */], new Uint16Array(data[36 /* TransferrableKeys.mutations */]));\n                if (config.onReceiveMessage) {\n                    config.onReceiveMessage(message);\n                }\n            };\n            return workerContext.ready().then(() => new ExportedWorker(workerContext, normalizedConfig));\n        }\n        return null;\n    });\n}\n//# sourceMappingURL=install.js.map","import { fetchAndInstall, install } from './install';\nexport function upgradeElement(baseElement, domURL) {\n    const authorURL = baseElement.getAttribute('src');\n    if (authorURL) {\n        return fetchAndInstall(baseElement, {\n            authorURL,\n            domURL,\n        });\n    }\n    return Promise.resolve(null);\n}\nexport { install };\n//# sourceMappingURL=index.js.map"],"names":["OffscreenCanvasProcessor","strings","nodeContext","workerContext","objectContext","config","allowedExecution","executorsAllowed","includes","execute","mutations","startPosition","allowedMutation","targetIndex","target","getNode","offscreen","transferControlToOffscreen","messageToWorker","_defineProperty","_index_","console","error","concat","print","isUserVisibleMutation","type","DefaultAllowedMutations","nodeListEach","list","callback","Array","prototype","forEach","call","BASE_ELEMENT_INDEX","NodeContext","stringContext","baseElement","_this","_classCallCheck","count","nodes","createNodes","buffer","sanitizer","nodeBuffer","Uint16Array","nodeBufferLength","length","iterator","node","document","createTextNode","get","createComment","createDocumentFragment","nodeName","createElementNS","createElement","sanitize","storeNode","id","storeNodes","childNodes","n","Map","_createClass","key","value","monitoredNodes","shouldTrackChanges","applyDefaultInputListener","oninput","fireValueChange","sendValueChangeOnAttributeMutation","MutationObserver","map","mutation","observe","attributes","set","fireResizeChange","cachedWindowSize","createTransferrableTouchList","touchList","Object","values","touch","identifier","screenX","screenY","clientX","clientY","pageX","pageY","EventSubscriptionProcessor","knownListeners","window","innerWidth","innerHeight","eventHandler","index","preventDefault","event","_2","currentTarget","_window","bubbles","cancelable","cancelBubble","defaultPrevented","eventPhase","isTrusted","returnValue","timeStamp","keyCode","undefined","offsetX","offsetY","touches","changedTouches","processListenerChange","addEvent","eventIndex","Boolean","addEventListener","removeEventListener","inputEventSubscribed","isChangeEvent","onchange","addEventListenerCount","removeEventListenerCount","addEventListenersPosition","REMOVE_EVENT_SUBSCRIPTION_LENGTH","endPosition","ADD_EVENT_SUBSCRIPTION_LENGTH","isRemoveEvent","BoundingClientRectProcessor","boundingRect","getBoundingClientRect","top","right","bottom","left","width","height","ChildListProcessor","_ref","appendNodeCount","removeNodeCount","slice","removeId","remove","addId","nextSibling","newNode","insertBefore","removedNodes","from","addedNodes","AttributeProcessor","getValue","attributeName","setAttribute","removeAttribute","CharacterDataProcessor","textContent","PropertyProcessor","name","setProperty","String","LongTaskExecutor","currentResolver","longTask","newResolver","Promise","resolve","f32","Float32Array","u16","deserializeTransferrableObject","offset","args","i","push","size","des","ObjectMutationProcessor","functionName","argCount","_deserializeTransferr","targetOffset","deserializedTarget","_deserializeTransferr2","argsOffset","isSetter","apply","_toConsumableArray","_deserializeTransferr3","ObjectCreationProcessor","Error","objectId","store","ImageBitmapProcessor","self","createImageBitmap","then","imageBitmap","StorageProcessor","location","getStorage","message","setStorage","storage","localStorage","sessionStorage","clear","removeItem","setItem","operation","keyIndex","valueIndex","fnCallCount","promiseMap","registerPromise","reject","promise","res","rej","Number","MAX_VALUE","FunctionProcessor","status","parsed","hasIndex","JSON","parse","ScrollIntoViewProcessor","scrollIntoView","MutatorProcessor","_this$executors","mutationQueue","pendingMutations","mutationPumpFunction","executors","syncFlush","allowVisibleMutations","arguments","disallowedMutations","mutationArray","operationStart","mutationType","mutationPump","sharedLongTaskProcessor","mutate","phase","stringValues","storeValues","StringContext","NODES_ALLOWED_TO_TRANSMIT_TEXT_CONTENT","createHydrateableNode","element","minimizeString","hydrateFilter","filteredChildNodes","filter","hydrated","nodeType","localName","child","attribute","namespaceURI","createHydrateableRootNode","stringMap","storeString","has","readableHydrateableRootNode","readableHydrateableNode","createReadableHydrateableRootNode","readableTransferredNode","out","attr","isEvent","isValueSync","isBoundingClientRect","isGetStorage","readableTransferrableEvent","item","scoped","readableTransferrableSyncValue","readableMessageToWorker","IframeWorker","url","iframeUrl","onerror","onmessage","onmessageerror","readyPromise","iframe","readyPromiseResolve","setupInit","proxyFromWorker","body","appendChild","_this2","listener","source","contentWindow","fetch","toString","text","code","data","msg","postMessage","_this3","_event$data","_objectSpread","transferables","_this4","WorkerContext","workerDOMScript","authorScript","_createHydrateableRoo","skeleton","cssKeys","globalEventHandlerKeys","localStorageInit","getStorageInit","sessionStorageInit","style","startsWith","authorURL","sandbox","Worker","URL","createObjectURL","Blob","info","onCreateWorker","ready","worker","ObjectContext","objects","obj","ExportedWorker","workerContext_","callFunction","functionIdentifer","_registerPromise","_len","functionArguments","_key","stringify","ALLOWABLE_MESSAGE_TYPES","fetchAndInstall","fetchPromise","all","domURL","response","install","mode","dataset","shadowRoot","attachShadow","clonedElement","cloneNode","normalizedConfig","normalizeConfiguration","_ref2","_slicedToArray","domScriptContent","authorScriptContent","mutatorContext","upgradeElement","getAttribute"],"mappings":"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"}